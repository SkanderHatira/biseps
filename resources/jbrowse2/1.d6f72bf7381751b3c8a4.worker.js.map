{"version":3,"sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/BedImport.ts"],"names":["bufferToString","buffer","TextDecoder","fatal","decode","parseWith","a","options","then","module","default","csv","noheader","output","fromString","guessColumnType","rowSet","columnNumber","isValidRefName","parsedLoc","text","rows","cells","guessedType","parseLocString","error","refName","start","test","dataToSpreadsheetSnapshot","hasColumnNameLine","columnNameLineNumber","maxCols","isLoaded","map","row","rowNumber","id","length","String","columnNames","undefined","splice","colNamesRow","forEach","cell","columns","columnDisplayOrder","push","extendedData","name","dataType","type","hasColumnNames","assemblyName","selectedAssemblyName","parseCsvBuffer","parseTsvBuffer","delimiter","browserBytes","split","c","charCodeAt","trackBytes","commentBytes","bytesAreFoundAt","position","bytes","i","removeBedHeaders","slice","parseBedBuffer","b","data","bedColumns","col","colNumber","bedColumn","unshift","isDerived","derivationFunctionText","parseBedPEBuffer","featureField","featureData","val","parseFloat","uniqueId","feature"],"mappings":"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","file":"1.d6f72bf7381751b3c8a4.worker.js","sourcesContent":["import { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nasync function parseWith(buffer: Buffer, options = {}) {\n  const csv = await import('csvtojson').then(module => module.default)\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","import { ParseOptions, parseTsvBuffer } from './ImportUtils'\n\nconst browserBytes = 'browser '.split('').map(c => c.charCodeAt(0))\nconst trackBytes = 'track '.split('').map(c => c.charCodeAt(0))\nconst commentBytes = '#'.split('').map(c => c.charCodeAt(0))\n\nfunction bytesAreFoundAt(position: number, buffer: Buffer, bytes: number[]) {\n  let i = 0\n  for (; i < bytes.length; i += 1) {\n    if (buffer[position + i] !== bytes[i]) {\n      return false\n    }\n  }\n  return true\n}\nexport function removeBedHeaders(buffer: Buffer) {\n  // slice off the first lines of the buffer if it starts with one or more\n  // header lines\n  let i = 0\n  for (; i < buffer.length; i += 1) {\n    if (\n      bytesAreFoundAt(i, buffer, browserBytes) ||\n      bytesAreFoundAt(i, buffer, trackBytes) ||\n      bytesAreFoundAt(i, buffer, commentBytes)\n    ) {\n      // consume up to the next newline\n      do {\n        i += 1\n      } while (buffer[i] !== 10)\n    } else {\n      // end of headers, return\n      break\n    }\n  }\n  if (i) {\n    return buffer.slice(i)\n  }\n  return buffer\n}\n\nexport async function parseBedBuffer(buffer: Buffer, options: ParseOptions) {\n  const b = removeBedHeaders(buffer)\n  const data = await parseTsvBuffer(b)\n  const bedColumns = [\n    { name: 'chrom', dataType: { type: 'LocRef' } },\n    { name: 'chromStart', dataType: { type: 'LocStart' } },\n    { name: 'chromEnd', dataType: { type: 'LocEnd' } },\n    { name: 'name', dataType: { type: 'Text' } },\n    { name: 'score', dataType: { type: 'Number' } },\n    { name: 'strand', dataType: { type: 'Text' } },\n  ]\n  data.columns.forEach((col, colNumber) => {\n    const bedColumn = bedColumns[colNumber]\n    if (bedColumn) {\n      col.name = bedColumn.name\n      col.dataType = bedColumn.dataType\n    }\n  })\n  data.hasColumnNames = true\n  data.assemblyName = options.selectedAssemblyName\n\n  data.columnDisplayOrder.push(data.columnDisplayOrder.length)\n  data.columns.unshift({\n    name: 'Location',\n    dataType: { type: 'LocString' },\n    isDerived: true,\n    derivationFunctionText: `jexl:{text:row.cells[0].text+':'+row.cells[1].text+'..'+row.cells[2].text,\\n\n    extendedData: {refName: row.cells.ref.text, start: parseInt(row.cells.start.text,10), end: parseInt(row.cells.end.text,10)}}`,\n  })\n  return data\n}\n\nexport async function parseBedPEBuffer(buffer: Buffer, options: ParseOptions) {\n  const b = removeBedHeaders(buffer)\n  const data = await parseTsvBuffer(b)\n  interface BedColumn {\n    name: string\n    dataType: {\n      type: string\n    }\n    featureField: string[]\n  }\n  const bedColumns: BedColumn[] = [\n    { name: 'chrom1', dataType: { type: 'Text' }, featureField: ['refName'] },\n    { name: 'start1', dataType: { type: 'Number' }, featureField: ['start'] },\n    { name: 'end1', dataType: { type: 'Number' }, featureField: ['end'] },\n    {\n      name: 'chrom2',\n      dataType: { type: 'Text' },\n      featureField: ['mate', 'refName'],\n    },\n    {\n      name: 'start2',\n      dataType: { type: 'Number' },\n      featureField: ['mate', 'start'],\n    },\n    {\n      name: 'end2',\n      dataType: { type: 'Number' },\n      featureField: ['mate', 'end'],\n    },\n    { name: 'name', dataType: { type: 'Text' }, featureField: ['name'] },\n    { name: 'score', dataType: { type: 'Number' }, featureField: ['score'] },\n    { name: 'strand1', dataType: { type: 'Text' }, featureField: ['strand'] },\n    {\n      name: 'strand2',\n      dataType: { type: 'Text' },\n      featureField: ['mate', 'strand'],\n    },\n  ]\n  data.columns.forEach((col, colNumber) => {\n    const bedColumn = bedColumns[colNumber]\n    if (bedColumn) {\n      col.name = bedColumn.name\n      col.dataType = bedColumn.dataType\n    }\n  })\n  data.hasColumnNames = true\n\n  // decorate each row with a feature object in its extendedData\n  data.rowSet.rows.forEach((row, rowNumber) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const featureData: Record<string, any> = {}\n    row.cells.forEach(({ text }, columnNumber) => {\n      const bedColumn = bedColumns[columnNumber]\n      const val =\n        bedColumn && bedColumn.dataType.type === 'Number' && text\n          ? parseFloat(text)\n          : text\n      if (bedColumn) {\n        // a predefined column\n        if (bedColumn.featureField.length === 2) {\n          if (!featureData[bedColumn.featureField[0]]) {\n            featureData[bedColumn.featureField[0]] = {}\n          }\n          featureData[bedColumn.featureField[0]][bedColumn.featureField[1]] =\n            val\n        } else {\n          featureData[bedColumn.featureField[0]] = val\n        }\n      } else {\n        // some other column\n        featureData[`column${columnNumber + 1}`] = val\n      }\n    })\n    featureData.uniqueId = `bedpe-${rowNumber}`\n    row.extendedData = {\n      feature: featureData,\n    }\n  })\n\n  data.assemblyName = options.selectedAssemblyName\n\n  return data\n}\n"],"sourceRoot":""}