{"version":3,"sources":["../../../plugins/alignments/src/BamAdapter/BamSlightlyLazyFeature.ts","../../../plugins/alignments/src/BamAdapter/BamAdapter.ts"],"names":["BamSlightlyLazyFeature","record","adapter","ref","this","get","flags","isReverseComplemented","isPaired","getPairOrientation","undefined","_next_refid","_refID","refIdToName","_next_pos","getReadBases","qualRaw","properties","Object","getOwnPropertyNames","prototype","Set","filter","prop","startsWith","map","methodName","replace","concat","_tags","id","field","seq_id","fromEntries","tags","t","elt","uniqueId","getMismatches","cigar","match","BamAdapter","samHeader","setupP","configured","bamLocation","readConfObject","config","location","indexType","bam","BamFile","bamFilehandle","openLocation","pluginManager","csiFilehandle","baiFilehandle","chunkSizeLimit","Infinity","fetchSizeLimit","yieldThreadTime","adapterConfig","getSubAdapter","then","dataAdapter","sequenceAdapter","Promise","resolve","opts","a","configure","getHeaderText","statusCallback","updateStatus","getHeader","idToName","nameToId","l","tag","forEach","sqLine","refId","data","item","refName","value","setupPre","catch","e","setup","start","end","refSeqStore","features","getFeatures","assemblyName","pipe","toArray","toPromise","seqChunks","sequence","sort","b","chunk","chunkStart","chunkEnd","trimStart","Math","max","trimLength","min","chunkSeq","substr","length","Error","toLocaleString","region","originalRefName","signal","ObservableCreate","observer","getRecordsForRange","records","checkAbortSignal","seqFetch","next","complete","regions","index","filehandle","bytesForRegions","bytes","BaseFeatureDataAdapter"],"mappings":"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","file":"static/js/51.4bba9ce5.chunk.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { BamRecord } from '@gmod/bam'\nimport { getMismatches } from './MismatchParser'\n\nimport BamAdapter from './BamAdapter'\n\nexport default class BamSlightlyLazyFeature implements Feature {\n  // uses parameter properties to automatically create fields on the class\n  // https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties\n  constructor(\n    private record: BamRecord,\n    private adapter: BamAdapter,\n    private ref?: string,\n  ) {}\n\n  _get_name() {\n    return this.record.get('name')\n  }\n\n  _get_type(): string {\n    return 'match'\n  }\n\n  _get_score(): number {\n    return this.record.get('mq')\n  }\n\n  _get_flags(): string {\n    return this.record.flags\n  }\n\n  _get_strand(): number {\n    return this.record.isReverseComplemented() ? -1 : 1\n  }\n\n  _get_pair_orientation() {\n    return this.record.isPaired() ? this.record.getPairOrientation() : undefined\n  }\n\n  _get_next_seq_id() {\n    return this.record._next_refid()\n  }\n\n  _get_seq_id() {\n    // @ts-ignore\n    return this.record._refID\n  }\n\n  _get_next_refName() {\n    return this.adapter.refIdToName(this.record._next_refid())\n  }\n\n  _get_next_segment_position() {\n    const { record, adapter } = this\n    return record.isPaired()\n      ? `${adapter.refIdToName(record._next_refid())}:${record._next_pos() + 1}`\n      : undefined\n  }\n\n  _get_seq() {\n    return this.record.getReadBases()\n  }\n\n  qualRaw() {\n    return this.record.qualRaw()\n  }\n\n  set() {}\n\n  tags() {\n    const properties = Object.getOwnPropertyNames(\n      BamSlightlyLazyFeature.prototype,\n    )\n\n    return [\n      ...new Set(\n        properties\n          .filter(\n            prop =>\n              prop.startsWith('_get_') &&\n              prop !== '_get_mismatches' &&\n              prop !== '_get_tags' &&\n              prop !== '_get_next_seq_id' &&\n              prop !== '_get_seq_id',\n          )\n          .map(methodName => methodName.replace('_get_', ''))\n          .concat(this.record._tags()),\n      ),\n    ]\n  }\n\n  id() {\n    return `${this.adapter.id}-${this.record.id()}`\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(field: string): any {\n    const methodName = `_get_${field}`\n    // @ts-ignore\n    if (this[methodName]) {\n      // @ts-ignore\n      return this[methodName]()\n    }\n    return this.record.get(field)\n  }\n\n  _get_refName() {\n    return this.adapter.refIdToName(this.record.seq_id())\n  }\n\n  parent() {\n    return undefined\n  }\n\n  children() {\n    return undefined\n  }\n\n  pairedFeature() {\n    return false\n  }\n\n  toJSON(): SimpleFeatureSerialized {\n    return {\n      ...Object.fromEntries(\n        this.tags()\n          .map(t => [t, this.get(t)])\n          .filter(elt => elt[1] !== undefined),\n      ),\n      uniqueId: this.id(),\n    }\n  }\n\n  _get_mismatches() {\n    return getMismatches(\n      this.get('CIGAR'),\n      this.get('MD'),\n      this.get('seq'),\n      this.ref,\n      this.qualRaw(),\n    )\n  }\n\n  _get_clipPos() {\n    const cigar = this.get('CIGAR') || ''\n    return this.get('strand') === -1\n      ? +(cigar.match(/(\\d+)[SH]$/) || [])[1] || 0\n      : +(cigar.match(/^(\\d+)([SH])/) || [])[1] || 0\n  }\n}\n","import { BamFile } from '@gmod/bam'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport {\n  checkAbortSignal,\n  bytesForRegions,\n  updateStatus,\n} from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { toArray } from 'rxjs/operators'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport BamSlightlyLazyFeature from './BamSlightlyLazyFeature'\n\ninterface Header {\n  idToName: string[]\n  nameToId: Record<string, number>\n}\n\nexport default class BamAdapter extends BaseFeatureDataAdapter {\n  private samHeader?: Header\n\n  private setupP?: Promise<Header>\n\n  protected configured?: Promise<{\n    bam: BamFile\n    sequenceAdapter?: BaseFeatureDataAdapter\n  }>\n\n  // derived classes may not use the same configuration so a custom\n  // configure method allows derived classes to override this behavior\n  protected async configure() {\n    if (!this.configured) {\n      const bamLocation = readConfObject(this.config, 'bamLocation')\n      const location = readConfObject(this.config, ['index', 'location'])\n      const indexType = readConfObject(this.config, ['index', 'indexType'])\n      const bam = new BamFile({\n        bamFilehandle: openLocation(bamLocation, this.pluginManager),\n        csiFilehandle:\n          indexType === 'CSI'\n            ? openLocation(location, this.pluginManager)\n            : undefined,\n        baiFilehandle:\n          indexType !== 'CSI'\n            ? openLocation(location, this.pluginManager)\n            : undefined,\n\n        // chunkSizeLimit and fetchSizeLimit are more troublesome than\n        // helpful, and have given overly large values on the ultra long\n        // nanopore reads even with 500MB limits, so disabled with infinity\n        chunkSizeLimit: Infinity,\n        fetchSizeLimit: Infinity,\n        yieldThreadTime: Infinity,\n      })\n\n      const adapterConfig = readConfObject(this.config, 'sequenceAdapter')\n      if (adapterConfig && this.getSubAdapter) {\n        this.configured = this.getSubAdapter(adapterConfig).then(\n          ({ dataAdapter }) => ({\n            bam,\n            sequenceAdapter: dataAdapter as BaseFeatureDataAdapter,\n          }),\n        )\n      } else {\n        this.configured = Promise.resolve({ bam })\n      }\n    }\n    return this.configured\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { bam } = await this.configure()\n    return bam.getHeaderText(opts)\n  }\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const { bam } = await this.configure()\n    this.samHeader = await updateStatus(\n      'Downloading index',\n      statusCallback,\n      async () => {\n        const samHeader = await bam.getHeader(opts)\n\n        // use the @SQ lines in the header to figure out the\n        // mapping between ref ref ID numbers and names\n        const idToName: string[] = []\n        const nameToId: Record<string, number> = {}\n        samHeader\n          .filter(l => l.tag === 'SQ')\n          .forEach((sqLine, refId) => {\n            sqLine.data.forEach(item => {\n              if (item.tag === 'SN') {\n                // this is the ref name\n                const refName = item.value\n                nameToId[refName] = refId\n                idToName[refId] = refName\n              }\n            })\n          })\n\n        return { idToName, nameToId }\n      },\n    )\n    return this.samHeader\n  }\n\n  private async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch(e => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const { idToName } = await this.setup(opts)\n    return idToName\n  }\n\n  private async seqFetch(refName: string, start: number, end: number) {\n    const { sequenceAdapter } = await this.configure()\n    const refSeqStore = sequenceAdapter\n    if (!refSeqStore) {\n      return undefined\n    }\n    if (!refName) {\n      return undefined\n    }\n\n    const features = refSeqStore.getFeatures({\n      refName,\n      start,\n      end,\n      assemblyName: '',\n    })\n\n    const seqChunks = await features.pipe(toArray()).toPromise()\n\n    let sequence = ''\n    seqChunks\n      .sort((a, b) => a.get('start') - b.get('start'))\n      .forEach(chunk => {\n        const chunkStart = chunk.get('start')\n        const chunkEnd = chunk.get('end')\n        const trimStart = Math.max(start - chunkStart, 0)\n        const trimEnd = Math.min(end - chunkStart, chunkEnd - chunkStart)\n        const trimLength = trimEnd - trimStart\n        const chunkSeq = chunk.get('seq') || chunk.get('residues')\n        sequence += chunkSeq.substr(trimStart, trimLength)\n      })\n\n    if (sequence.length !== end - start) {\n      throw new Error(\n        `sequence fetch failed: fetching ${refName}:${(\n          start - 1\n        ).toLocaleString()}-${end.toLocaleString()} returned ${sequence.length.toLocaleString()} bases, but should have returned ${(\n          end - start\n        ).toLocaleString()}`,\n      )\n    }\n    return sequence\n  }\n\n  getFeatures(\n    region: Region & { originalRefName?: string },\n    opts?: BaseOptions,\n  ) {\n    const { refName, start, end, originalRefName } = region\n    const { signal, statusCallback = () => {} } = opts || {}\n    return ObservableCreate<Feature>(async observer => {\n      const { bam } = await this.configure()\n      await this.setup(opts)\n      statusCallback('Downloading alignments')\n      const records = await bam.getRecordsForRange(refName, start, end, opts)\n\n      checkAbortSignal(signal)\n\n      for (const record of records) {\n        let ref: string | undefined\n        if (!record.get('MD')) {\n          ref = await this.seqFetch(\n            originalRefName || refName,\n            record.get('start'),\n            record.get('end'),\n          )\n        }\n        observer.next(new BamSlightlyLazyFeature(record, this, ref))\n      }\n      statusCallback('')\n      observer.complete()\n    }, signal)\n  }\n\n  async estimateRegionsStats(regions: Region[], opts?: BaseOptions) {\n    const { bam } = await this.configure()\n    // this is a method to avoid calling on htsget adapters\n    // @ts-ignore\n    if (bam.index.filehandle !== '?') {\n      const bytes = await bytesForRegions(regions, bam)\n      const fetchSizeLimit = readConfObject(this.config, 'fetchSizeLimit')\n      return { bytes, fetchSizeLimit }\n    } else {\n      return super.estimateRegionsStats(regions, opts)\n    }\n  }\n\n  freeResources(/* { region } */): void {}\n\n  // depends on setup being called before the BAM constructor\n  refIdToName(refId: number): string | undefined {\n    return this.samHeader?.idToName[refId]\n  }\n}\n"],"sourceRoot":""}