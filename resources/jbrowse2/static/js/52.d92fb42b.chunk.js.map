{"version":3,"sources":["../../../plugins/data-management/src/HierarchicalTrackSelectorWidget/components/HierarchicalTrackSelector.js"],"names":["CloseConnectionDialog","lazy","DeleteConnectionDialog","ManageConnectionsDialog","ToggleConnectionsDialog","useStyles","makeStyles","theme","searchBox","marginBottom","menuIcon","marginRight","fab","position","bottom","right","compactCheckbox","padding","checkboxLabel","backgroundColor","accordionBase","display","accordionCard","cursor","nestingLevelMarker","borderLeft","accordionColor","background","color","width","paddingLeft","accordionText","margin","Node","props","data","isOpen","style","setOpen","isLeaf","nestingLevel","checked","id","name","onChange","toggleCollapse","conf","onMoreInfo","drawerPosition","classes","marginLeft","unsupported","description","readConfObject","className","undefined","Array","fill","map","key","left","idx","height","onClick","whiteSpace","title","placement","control","disabled","inputProps","label","e","target","getNodeData","node","extra","defaultHeight","isOpenByDefault","HierarchicalTree","observer","tree","model","filterText","view","treeRef","useRef","useState","info","setMoreInfo","session","getSession","useMemo","trackId","pathName","treeWalker","useCallback","i","parentMeta","curr","menuItems","useEffect","refreshNodes","useDefaultHeight","ref","anchorEl","onMenuItemClick","callback","open","Boolean","onClose","AutoSizedHierarchicalTree","offset","jest","disableWidth","Wrapper","overrideDimensions","children","HierarchicalTrackSelectorContainer","toolbarHeight","setAnchorEl","event","handleFabClose","widget","HierarchicalTrackSelectorHeader","setHeaderHeight","setAssemblyIdx","assemblyIdx","connectionAnchorEl","setConnectionAnchorEl","menuAnchorEl","setMenuAnchorEl","modalInfo","setModalInfo","deleteDialogDetails","setDeleteDialogDetails","connectionManagerOpen","setConnectionManagerOpen","connectionToggleOpen","setConnectionToggleOpen","assemblyNames","assemblyName","connectionConf","result","safelyBreakConnection","dereferenceTypeCount","Object","connectionMenuItems","assemblyMenuItems","subMenu","value","fullWidth","InputProps","endAdornment","clearFilterText","fallback","handleClose","breakConnection","HierarchicalTrackSelector","headerHeight"],"mappings":"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","file":"static/js/52.d92fb42b.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, {\n  Suspense,\n  lazy,\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n  useEffect,\n} from 'react'\nimport {\n  Checkbox,\n  Fab,\n  FormControlLabel,\n  IconButton,\n  InputAdornment,\n  Menu,\n  MenuItem,\n  TextField,\n  Tooltip,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\n\n// icons\nimport ClearIcon from '@material-ui/icons/Clear'\nimport AddIcon from '@material-ui/icons/Add'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport MoreIcon from '@material-ui/icons/MoreHoriz'\nimport PowerOutlinedIcon from '@material-ui/icons/PowerOutlined'\n\n// other\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport JBrowseMenu from '@jbrowse/core/ui/Menu'\nimport { getSession } from '@jbrowse/core/util'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport { VariableSizeTree } from 'react-vtree'\n\nconst CloseConnectionDialog = lazy(() => import('./CloseConnectionDialog'))\nconst DeleteConnectionDialog = lazy(() => import('./DeleteConnectionDialog'))\nconst ManageConnectionsDialog = lazy(() => import('./ManageConnectionsDialog'))\nconst ToggleConnectionsDialog = lazy(() => import('./ToggleConnectionsDialog'))\n\nconst useStyles = makeStyles(theme => ({\n  searchBox: {\n    marginBottom: theme.spacing(2),\n  },\n  menuIcon: {\n    marginRight: theme.spacing(1),\n    marginBottom: 0,\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(6),\n    right: theme.spacing(6),\n  },\n  compactCheckbox: {\n    padding: 0,\n  },\n\n  checkboxLabel: {\n    marginRight: 0,\n    '&:hover': {\n      backgroundColor: '#eee',\n    },\n  },\n\n  // this accordionBase element's small padding is used to give a margin to\n  // accordionColor it a \"margin\" because the virtualized elements can't really\n  // use margin in a conventional way (it doesn't affect layout)\n  accordionBase: {\n    display: 'flex',\n  },\n\n  accordionCard: {\n    padding: 3,\n    cursor: 'pointer',\n    display: 'flex',\n  },\n\n  nestingLevelMarker: {\n    position: 'absolute',\n    borderLeft: '1.5px solid #555',\n  },\n  // accordionColor set's display:flex so that the child accordionText use\n  // vertically centered text\n  accordionColor: {\n    background: theme.palette.tertiary?.main,\n    color: theme.palette.tertiary?.contrastText,\n    width: '100%',\n    display: 'flex',\n    paddingLeft: 5,\n  },\n\n  // margin:auto 0 to center text vertically\n  accordionText: {\n    margin: 'auto 0',\n  },\n}))\n\n// An individual node in the track selector. Note: manually sets cursor:\n// pointer improves usability for what can be clicked\nconst Node = props => {\n  const { data, isOpen, style, setOpen } = props\n  const {\n    isLeaf,\n    nestingLevel,\n    checked,\n    id,\n    name,\n    onChange,\n    toggleCollapse,\n    conf,\n    onMoreInfo,\n    drawerPosition,\n  } = data\n\n  const classes = useStyles()\n  const width = 10\n  const marginLeft = nestingLevel * width + (isLeaf ? width : 0)\n  const unsupported =\n    name && (name.endsWith('(Unsupported)') || name.endsWith('(Unknown)'))\n  const description = (conf && readConfObject(conf, ['description'])) || ''\n\n  return (\n    <div style={style} className={!isLeaf ? classes.accordionBase : undefined}>\n      {new Array(nestingLevel).fill(0).map((_, idx) => (\n        <div\n          key={`mark-${idx}`}\n          style={{ left: idx * width + 4, height: style.height }}\n          className={classes.nestingLevelMarker}\n        />\n      ))}\n      <div\n        className={!isLeaf ? classes.accordionCard : undefined}\n        onClick={() => {\n          toggleCollapse(id)\n          setOpen(!isOpen)\n        }}\n        style={{\n          marginLeft,\n          whiteSpace: 'nowrap',\n          width: '100%',\n        }}\n      >\n        <div className={!isLeaf ? classes.accordionColor : undefined}>\n          {!isLeaf ? (\n            <div className={classes.accordionText}>\n              <Typography>\n                {isOpen ? <ArrowDropDownIcon /> : <ArrowRightIcon />}\n                {name}\n              </Typography>\n            </div>\n          ) : (\n            <>\n              <Tooltip\n                title={description}\n                placement={drawerPosition === 'left' ? 'right' : 'left'}\n              >\n                <FormControlLabel\n                  className={classes.checkboxLabel}\n                  control={\n                    <Checkbox\n                      className={classes.compactCheckbox}\n                      checked={checked}\n                      onChange={() => onChange(id)}\n                      color=\"primary\"\n                      disabled={unsupported}\n                      inputProps={{\n                        'data-testid': `htsTrackEntry-${id}`,\n                      }}\n                    />\n                  }\n                  label={name}\n                />\n              </Tooltip>\n              <IconButton\n                onClick={e => onMoreInfo({ target: e.currentTarget, id, conf })}\n                color=\"secondary\"\n                data-testid={`htsTrackEntryMenu-${id}`}\n              >\n                <MoreIcon />\n              </IconButton>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst getNodeData = (node, nestingLevel, extra) => {\n  const isLeaf = !!node.conf\n  return {\n    data: {\n      defaultHeight: isLeaf ? 22 : 40,\n      isLeaf,\n      isOpenByDefault: true,\n      nestingLevel,\n      ...node,\n      ...extra,\n    },\n    nestingLevel,\n    node,\n  }\n}\n\n// this is the main tree component for the hierarchical track selector in note:\n// in jbrowse-web the toolbar is position=\"sticky\" which means the autosizer\n// includes the height of the toolbar, so we subtract the given offsets\nconst HierarchicalTree = observer(({ height, tree, model }) => {\n  const { filterText, view } = model\n  const treeRef = useRef(null)\n  const [info, setMoreInfo] = useState()\n  const session = getSession(model)\n  const { drawerPosition } = session\n\n  const extra = useMemo(\n    () => ({\n      onChange: trackId => view.toggleTrack(trackId),\n      toggleCollapse: pathName => model.toggleCategory(pathName),\n      onMoreInfo: setMoreInfo,\n      drawerPosition,\n    }),\n    [view, model, drawerPosition],\n  )\n  const treeWalker = useCallback(\n    function* treeWalker() {\n      for (let i = 0; i < tree.children.length; i++) {\n        yield getNodeData(tree.children[i], 0, extra)\n      }\n\n      while (true) {\n        const parentMeta = yield\n\n        for (let i = 0; i < parentMeta.node.children.length; i++) {\n          const curr = parentMeta.node.children[i]\n          yield getNodeData(curr, parentMeta.nestingLevel + 1, extra)\n        }\n      }\n    },\n    [tree, extra],\n  )\n\n  const conf = info?.conf\n  const menuItems = (conf && session.getTrackActionMenuItems?.(conf)) || []\n\n  useEffect(() => {\n    treeRef.current.recomputeTree({\n      refreshNodes: true,\n      useDefaultHeight: true,\n    })\n  }, [tree, filterText])\n  return (\n    <>\n      <VariableSizeTree ref={treeRef} treeWalker={treeWalker} height={height}>\n        {Node}\n      </VariableSizeTree>\n      <JBrowseMenu\n        anchorEl={info?.target}\n        menuItems={menuItems}\n        onMenuItemClick={(_event, callback) => {\n          callback()\n          setMoreInfo(undefined)\n        }}\n        open={Boolean(info)}\n        onClose={() => setMoreInfo(undefined)}\n      />\n    </>\n  )\n})\n\n// Don't use autosizer in jest and instead hardcode a height, otherwise fails\n// jest tests\nconst AutoSizedHierarchicalTree = ({ tree, model, offset }) => {\n  return typeof jest === 'undefined' ? (\n    <AutoSizer disableWidth>\n      {({ height }) => {\n        return (\n          <HierarchicalTree\n            height={height - offset}\n            model={model}\n            tree={tree}\n          />\n        )\n      }}\n    </AutoSizer>\n  ) : (\n    <HierarchicalTree height={9000} model={model} tree={tree} />\n  )\n}\n\nconst Wrapper = ({ overrideDimensions, children }) => {\n  return overrideDimensions ? (\n    <div style={{ ...overrideDimensions }}>{children}</div>\n  ) : (\n    <>{children}</>\n  )\n}\nconst HierarchicalTrackSelectorContainer = observer(\n  ({ model, toolbarHeight, overrideDimensions }) => {\n    const classes = useStyles()\n    const session = getSession(model)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    function handleFabClose() {\n      setAnchorEl(null)\n    }\n    return (\n      <Wrapper overrideDimensions={overrideDimensions}>\n        <HierarchicalTrackSelector\n          model={model}\n          toolbarHeight={toolbarHeight}\n          overrideDimensions={overrideDimensions}\n        />\n        <Fab\n          color=\"secondary\"\n          className={classes.fab}\n          onClick={event => {\n            setAnchorEl(event.currentTarget)\n          }}\n        >\n          <AddIcon />\n        </Fab>\n        <Menu\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={() => setAnchorEl(null)}\n        >\n          <MenuItem\n            onClick={() => {\n              handleFabClose()\n              const widget = session.addWidget(\n                'AddConnectionWidget',\n                'addConnectionWidget',\n              )\n              session.showWidget(widget)\n            }}\n          >\n            Add connection\n          </MenuItem>\n          <MenuItem\n            onClick={() => {\n              handleFabClose()\n              const widget = session.addWidget(\n                'AddTrackWidget',\n                'addTrackWidget',\n                {\n                  view: model.view.id,\n                },\n              )\n              session.showWidget(widget)\n            }}\n          >\n            Add track\n          </MenuItem>\n        </Menu>\n      </Wrapper>\n    )\n  },\n)\n\nconst HierarchicalTrackSelectorHeader = observer(\n  ({ model, setHeaderHeight, setAssemblyIdx, assemblyIdx }) => {\n    const classes = useStyles()\n    const session = getSession(model)\n    const [connectionAnchorEl, setConnectionAnchorEl] = useState()\n    const [menuAnchorEl, setMenuAnchorEl] = useState()\n    const [modalInfo, setModalInfo] = useState()\n    const [deleteDialogDetails, setDeleteDialogDetails] = useState()\n    const [connectionManagerOpen, setConnectionManagerOpen] = useState(false)\n    const [connectionToggleOpen, setConnectionToggleOpen] = useState(false)\n    const { assemblyNames } = model\n    const assemblyName = assemblyNames[assemblyIdx]\n\n    function breakConnection(connectionConf, deletingConnection) {\n      const name = readConfObject(connectionConf, 'name')\n      const result = session.prepareToBreakConnection(connectionConf)\n      if (result) {\n        const [safelyBreakConnection, dereferenceTypeCount] = result\n        if (Object.keys(dereferenceTypeCount).length > 0) {\n          setModalInfo({\n            connectionConf,\n            safelyBreakConnection,\n            dereferenceTypeCount,\n            name,\n          })\n        } else {\n          safelyBreakConnection()\n        }\n      }\n      if (deletingConnection) {\n        setDeleteDialogDetails({ name, connectionConf })\n      }\n    }\n\n    const connectionMenuItems = [\n      {\n        label: 'Turn on/off connections...',\n        onClick: () => setConnectionToggleOpen(true),\n      },\n      {\n        label: 'Delete connections...',\n        onClick: () => setConnectionManagerOpen(true),\n      },\n    ]\n    const assemblyMenuItems =\n      assemblyNames.length > 1\n        ? [\n            {\n              label: 'Select assembly...',\n              subMenu: assemblyNames.map((name, idx) => ({\n                label: name,\n                onClick: () => {\n                  setAssemblyIdx(idx)\n                },\n              })),\n            },\n          ]\n        : []\n\n    const menuItems = [\n      {\n        label: 'Add track...',\n        onClick: () => {\n          session.showWidget(\n            session.addWidget('AddTrackWidget', 'addTrackWidget', {\n              view: model.view.id,\n            }),\n          )\n        },\n      },\n\n      ...assemblyMenuItems,\n    ]\n\n    return (\n      <div\n        ref={ref => setHeaderHeight(ref?.getBoundingClientRect().height || 0)}\n        data-testid=\"hierarchical_track_selector\"\n      >\n        <div style={{ display: 'flex' }}>\n          <IconButton\n            className={classes.menuIcon}\n            onClick={event => {\n              setMenuAnchorEl(event.currentTarget)\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <IconButton\n            className={classes.menuIcon}\n            onClick={event => {\n              setConnectionAnchorEl(event.currentTarget)\n            }}\n          >\n            <PowerOutlinedIcon />\n          </IconButton>\n          <TextField\n            className={classes.searchBox}\n            label=\"Filter tracks\"\n            value={model.filterText}\n            onChange={event => model.setFilterText(event.target.value)}\n            fullWidth\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton color=\"secondary\" onClick={model.clearFilterText}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </div>\n\n        <JBrowseMenu\n          anchorEl={connectionAnchorEl}\n          open={Boolean(connectionAnchorEl)}\n          onMenuItemClick={(_, callback) => {\n            callback()\n            setConnectionAnchorEl(undefined)\n          }}\n          onClose={() => {\n            setConnectionAnchorEl(undefined)\n          }}\n          menuItems={[\n            {\n              label: 'Add connection',\n              onClick: () => {\n                session.showWidget(\n                  session.addWidget(\n                    'AddConnectionWidget',\n                    'addConnectionWidget',\n                  ),\n                )\n              },\n            },\n            ...connectionMenuItems,\n          ]}\n        />\n\n        <JBrowseMenu\n          anchorEl={menuAnchorEl}\n          open={Boolean(menuAnchorEl)}\n          onMenuItemClick={(_, callback) => {\n            callback()\n            setMenuAnchorEl(undefined)\n          }}\n          onClose={() => {\n            setMenuAnchorEl(undefined)\n          }}\n          menuItems={menuItems}\n        />\n\n        <Suspense fallback={<div />}>\n          {modalInfo ? (\n            <CloseConnectionDialog\n              modalInfo={modalInfo}\n              setModalInfo={setModalInfo}\n              session={session}\n            />\n          ) : deleteDialogDetails ? (\n            <DeleteConnectionDialog\n              handleClose={() => {\n                setDeleteDialogDetails(undefined)\n              }}\n              deleteDialogDetails={deleteDialogDetails}\n              session={session}\n            />\n          ) : null}\n          {connectionManagerOpen ? (\n            <ManageConnectionsDialog\n              handleClose={() => setConnectionManagerOpen(false)}\n              breakConnection={breakConnection}\n              session={session}\n            />\n          ) : null}\n          {connectionToggleOpen ? (\n            <ToggleConnectionsDialog\n              handleClose={() => setConnectionToggleOpen(false)}\n              session={session}\n              breakConnection={breakConnection}\n              assemblyName={assemblyName}\n            />\n          ) : null}\n        </Suspense>\n      </div>\n    )\n  },\n)\nconst HierarchicalTrackSelector = observer(({ model, toolbarHeight = 0 }) => {\n  const [assemblyIdx, setAssemblyIdx] = useState(0)\n  const [headerHeight, setHeaderHeight] = useState(0)\n\n  const { assemblyNames } = model\n  const assemblyName = assemblyNames[assemblyIdx]\n  return assemblyName ? (\n    <>\n      <HierarchicalTrackSelectorHeader\n        model={model}\n        setHeaderHeight={setHeaderHeight}\n        setAssemblyIdx={setAssemblyIdx}\n        assemblyIdx={assemblyIdx}\n      />\n      <AutoSizedHierarchicalTree\n        tree={model.hierarchy(assemblyName)}\n        model={model}\n        offset={toolbarHeight + headerHeight}\n      />\n    </>\n  ) : null\n})\n\nexport default HierarchicalTrackSelectorContainer\n"],"sourceRoot":""}