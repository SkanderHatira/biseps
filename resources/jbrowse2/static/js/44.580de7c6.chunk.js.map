{"version":3,"sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.js","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.js","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.js","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.js"],"names":["useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","fontFamily","fontSize","observer","slot","classes","useState","value","code","setCode","error","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","stringToJexlExpression","getEnv","pluginManager","_getEnv$pluginManager","jexl","set","e","console","React","FormControl","InputLabel","shrink","htmlFor","name","Editor","className","split","onValueChange","newCode","highlight","padding","style","background","undefined","FormHelperText","color","description","Tooltip","title","contextVariable","arrow","IconButton","onClick","newWindow","window","open","opener","HelpIcon","ColorPicker","lazy","ColorSlot","props","label","TextFieldProps","onChange","displayed","setDisplayed","TextField","InputProps","borderRightWidth","borderRightStyle","borderRightColor","event","target","Suspense","fallback","Object","r","g","b","a","serializeColor","rgb","defaultProps","helperText","fullWidth","StringEditor","evt","TextEditor","multiline","SvgCheckbox","SvgIcon","d","StringArrayEditor","setValue","List","disablePadding","map","val","idx","ListItem","key","disableGutters","setAtIndex","endAdornment","InputAdornment","position","removeAtIndex","DeleteIcon","placeholder","add","disabled","AddIcon","useMapEditorStyles","card","spacing","StringArrayMapEditor","Array","from","Card","raised","CardHeader","action","remove","CardContent","strValue","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","NumberMapEditor","NumberEditor","numValue","setVal","num","parseFloat","Number","isNaN","reset","type","IntegerEditor","parseInt","booleanEditor","FormControlLabel","control","Checkbox","checked","stringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","getPropertyType","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","numberMap","number","integer","ColorEditor","stringEnum","boolean","frozen","JsonEditor","configRelationships","useSlotEditorStyles","paper","display","marginBottom","paperContent","width","slotModeSwitch","secondary","light","justifyContent","alignItems","SlotEditor","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","slotModeIcon","convertToValue","convertToCallback","RadioButtonUncheckedIcon","TypeSelector","typeNameChoices","slotName","expandIcon","root","expansionPanelDetails","accordion","border","primary","Member","typeSelector","schema","path","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","setSubschema","Accordion","defaultExpanded","TransitionProps","unmountOnExit","timeout","AccordionSummary","ExpandMoreIcon","Typography","join","AccordionDetails","FormGroup","Schema","isConfigurationSlotType","properties","getMembers","entries","ConfigurationEditor","model","readConfObject"],"mappings":"ojBAwBMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,eAAgB,CACdC,UAAW,OACXC,aAAc,aAAF,OAAeH,EAAMI,QAAQC,SACzCC,WANF,uNAOEC,SAZa,YA8FFC,0BA9Ef,YAAkC,IAARC,EAAQ,EAARA,KAClBC,EAAUZ,IAEhB,EAAwBa,mBAASF,EAAKG,OAAtC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BH,qBAA9B,mBAAOI,EAAP,KAAcC,EAAd,KACMC,EAAgBC,sBAAYL,EAAM,KAqBxC,OAnBAM,qBAAU,WACR,IAAI,MACIC,EAAoBH,EAAcI,WAAW,SAC/CJ,EADsBA,eAEdA,GACZK,YACEF,EADoB,UAEpBG,iBAAOd,GAAMe,qBAFO,aAEpBC,EAA4BC,MAE9BjB,EAAKkB,IAAIP,GACTJ,EAAa,MACb,MAAOY,GACPC,QAAQd,MAAM,CAAEa,MAChBZ,EAAaY,MAEd,CAACX,EAAeR,IAKjBqB,oCACEA,kBAACC,IAAD,KACED,kBAACE,IAAD,CAAYC,QAAM,EAACC,QAAQ,mBACxBzB,EAAK0B,MAERL,kBAACM,IAAD,CACEC,UAAW3B,EAAQT,eACnBW,MAAOC,EAAKQ,WAAW,SAAWR,EAAKyB,MAAM,SAAS,GAAKzB,EAC3D0B,cAAe,SAAAC,GAAO,OAAI1B,EAAQ0B,IAClCC,UAAW,SAAAD,GAAO,OAAIA,GACtBE,QAAS,GACTC,MAAO,CAAEC,WAAY7B,EAAQ,YAAS8B,KAEvC9B,EACCe,kBAACgB,IAAD,CACEH,MAAO,CAAEI,MAAO,SADlB,UAEKhC,IACH,KACJe,kBAACgB,IAAD,KAAiBrC,EAAKuC,cAExBlB,kBAACmB,IAAD,CACEC,MACEpB,0FAEEA,6BAFF,sCAE4CrB,EAAK0C,iBAGnDC,OAAK,GAELtB,kBAACuB,IAAD,CACEN,MAAM,UACNO,QAAS,WACP,IAAMC,EAAYC,OAAOC,KACvB,mCACA,SACA,uBAEEF,IACFA,EAAUG,OAAS,QAIvB5B,kBAAC6B,IAAD,YChGJC,EAAcC,gBAAK,kBAAM,yDAYxB,IAAMC,EAAY,SAACC,GASxB,IAAQnD,EAA2CmD,EAA3CnD,MAAOoD,EAAoCD,EAApCC,MAAOC,EAA6BF,EAA7BE,eAAgBC,EAAaH,EAAbG,SACtC,EAAkCvD,oBAAS,GAA3C,mBAAOwD,EAAP,KAAkBC,EAAlB,KAEA,OACE,oCACE,kBAACC,EAAA,EAAD,eACEzD,MAAOA,EACPoD,MAAOA,EACPM,WAAY,CACV3B,MAAO,CACLI,MAAOnC,EACP2D,iBAAkB,OAClBC,iBAAkB,QAClBC,iBAAkB7D,IAGtB0C,QAAS,kBAAMc,GAAcD,IAC7BD,SAAU,SAAAQ,GACRR,EAASQ,EAAMC,OAAO/D,SAEpBqD,IAELE,EACC,kBAAC,IAAMS,SAAP,CAAgBC,SAAU,+BACxB,kBAACjB,EAAD,CACEb,MAAOnC,EACPsD,SAAU,SAAAQ,GACRR,EA5Cd,SAAwBnB,GACtB,GAAIA,aAAiB+B,OAAQ,CAC3B,MAAuB/B,EAAfgC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGC,EAAd,EAAcA,EAAGC,EAAjB,EAAiBA,EACjB,YAAarC,IAANqC,EAAA,cAAyBH,EAAzB,YAA8BC,EAA9B,YAAmCC,EAAnC,oBAAkDF,EAAlD,YAAuDC,EAAvD,YAA4DC,EAA5D,YAAiEC,EAAjE,KAET,OAAOnC,EAuCcoC,CAAeT,EAAMU,UAIlC,OAUVtB,EAAUuB,aAAe,CACvBrB,MAAO,GACPpD,MAAO,OACPqD,eAAgB,IAkCHzD,2BA/Bf,SAAyBuD,GAQvB,IAAQtD,EAASsD,EAATtD,KACR,OACE,kBAAC,EAAD,CACEuD,MAAOvD,EAAK0B,KACZvB,MAAOH,EAAKG,MACZsD,SAAU,SAACnB,GACTtC,EAAKkB,IAAIoB,IAEXkB,eAAgB,CACdqB,WAAY7E,EAAKuC,YACjBuC,WAAW,Q,UCrDbC,GAAehF,oBAAS,gBAAGC,EAAH,EAAGA,KAAH,OAC5BqB,kBAACuC,IAAD,CACEL,MAAOvD,EAAK0B,KAEZmD,WAAY7E,EAAKuC,YACjBuC,WAAS,EACT3E,MAAOH,EAAKG,MACZsD,SAAU,SAAAuB,GAAG,OAAIhF,EAAKkB,IAAI8D,EAAId,OAAO/D,aAInC8E,GAAalF,oBAAS,gBAAGC,EAAH,EAAGA,KAAH,OAC1BqB,kBAACuC,IAAD,CACEL,MAAOvD,EAAK0B,KACZmD,WAAY7E,EAAKuC,YACjBuC,WAAS,EACTI,WAAS,EACT/E,MAAOH,EAAKG,MACZsD,SAAU,SAAAuB,GAAG,OAAIhF,EAAKkB,IAAI8D,EAAId,OAAO/D,aAKnCgF,GAAc,kBAClB9D,kBAAC+D,IAAD,KACE/D,0BAAMgE,EAAE,0YAINC,GAAoBvF,oBAAS,YAAc,IAAXC,EAAW,EAAXA,KACpC,EAA0BE,mBAAS,IAAnC,mBAAOC,EAAP,KAAcoF,EAAd,KACA,OACElE,oCACGrB,EAAK0B,KAAOL,kBAACE,IAAD,KAAavB,EAAK0B,MAAqB,KACpDL,kBAACmE,IAAD,CAAMC,gBAAc,GACjBzF,EAAKG,MAAMuF,KAAI,SAACC,EAAKC,GAAN,OACdvE,kBAACwE,IAAD,CAAUC,IAAKF,EAAKG,gBAAc,GAChC1E,kBAACuC,IAAD,CACEzD,MAAOwF,EACPlC,SAAU,SAAAuB,GAAG,OAAIhF,EAAKgG,WAAWJ,EAAKZ,EAAId,OAAO/D,QACjD0D,WAAY,CACVoC,aACE5E,kBAAC6E,IAAD,CAAgBC,SAAS,OACvB9E,kBAACuB,IAAD,CACEN,MAAM,YACNO,QAAS,kBAAM7C,EAAKoG,cAAcR,KAElCvE,kBAACgF,IAAD,eAQdhF,kBAACwE,IAAD,CAAUE,gBAAc,GACtB1E,kBAACuC,IAAD,CACEzD,MAAOA,EACPmG,YAAY,UACZ7C,SAAU,SAAAQ,GAAK,OAAIsB,EAAStB,EAAMC,OAAO/D,QACzC0D,WAAY,CACVoC,aACE5E,kBAAC6E,IAAD,CAAgBC,SAAS,OACvB9E,kBAACuB,IAAD,CACEC,QAAS,WACP7C,EAAKuG,IAAIpG,GACToF,EAAS,KAEXiB,SAAoB,KAAVrG,EACVmC,MAAM,YACN,uCAA+BtC,EAAK0B,OAEpCL,kBAACoF,IAAD,aAQdpF,kBAACgB,IAAD,KAAiBrC,EAAKuC,iBAKtBmE,GAAqBpH,aAAW,SAAAC,GAAK,MAAK,CAC9CoH,KAAM,CACJlH,UAAWF,EAAMqH,QAAQ,QAIvBC,GAAuB9G,oBAAS,YAAc,IAAXC,EAAW,EAAXA,KACjCC,EAAUyG,KAChB,EAA0BxG,mBAAS,IAAnC,mBAAOC,EAAP,KAAcoF,EAAd,KACA,OACElE,oCACEA,kBAACE,IAAD,KAAavB,EAAK0B,MACjBoF,MAAMC,KAAK/G,EAAKG,OAAO,mCAAE2F,EAAF,KAAOH,EAAP,YACtBtE,kBAAC2F,IAAD,CAAMC,QAAM,EAACnB,IAAKA,EAAKlE,UAAW3B,EAAQ0G,MACxCtF,kBAAC6F,IAAD,CACEzE,MAAOqD,EACPqB,OACE9F,kBAACuB,IAAD,CAAYN,MAAM,YAAYO,QAAS,kBAAM7C,EAAKoH,OAAOtB,KACvDzE,kBAACgF,IAAD,SAINhF,kBAACgG,IAAD,KACEhG,kBAACiE,GAAD,CACEtF,KAAM,CACJG,MAAOwF,EACPpD,YAAa,gCAAF,OAAkCuD,GAC7CE,WAAY,SAACJ,EAAK0B,GAChBtH,EAAKuH,cAAczB,EAAKF,EAAK0B,IAE/BlB,cAAe,SAAAR,GACb5F,EAAKwH,iBAAiB1B,EAAKF,IAE7BW,IAAK,SAAAe,GACHtH,EAAKyH,SAAS3B,EAAKwB,YAO/BjG,kBAAC2F,IAAD,CAAMC,QAAM,EAACrF,UAAW3B,EAAQ0G,MAC9BtF,kBAAC6F,IAAD,CACEQ,mBAAiB,EACjBjF,MACEpB,kBAACuC,IAAD,CACEkB,WAAS,EACT3E,MAAOA,EACPmG,YAAY,UACZ7C,SAAU,SAAAQ,GAAK,OAAIsB,EAAStB,EAAMC,OAAO/D,QACzC0D,WAAY,CACVoC,aACE5E,kBAAC6E,IAAD,CAAgBC,SAAS,OACvB9E,kBAACuB,IAAD,CACE4D,SAAoB,KAAVrG,EACV0C,QAAS,WACP7C,EAAKuG,IAAIpG,EAAO,IAChBoF,EAAS,KAEXjD,MAAM,aAENjB,kBAACoF,IAAD,cAShBpF,kBAACgB,IAAD,KAAiBrC,EAAKuC,iBAKtBoF,GAAkB5H,oBAAS,YAAc,IAAXC,EAAW,EAAXA,KAC5BC,EAAUyG,KAChB,EAA0BxG,mBAAS,IAAnC,mBAAOC,EAAP,KAAcoF,EAAd,KACA,OACElE,oCACEA,kBAACE,IAAD,KAAavB,EAAK0B,MACjBoF,MAAMC,KAAK/G,EAAKG,OAAO,mCAAE2F,EAAF,KAAOH,EAAP,YACtBtE,kBAAC2F,IAAD,CAAMC,QAAM,EAACnB,IAAKA,EAAKlE,UAAW3B,EAAQ0G,MACxCtF,kBAAC6F,IAAD,CACEzE,MAAOqD,EACPqB,OACE9F,kBAACuB,IAAD,CAAYN,MAAM,YAAYO,QAAS,kBAAM7C,EAAKoH,OAAOtB,KACvDzE,kBAACgF,IAAD,SAINhF,kBAACgG,IAAD,KACEhG,kBAACuG,GAAD,CACE5H,KAAM,CACJG,MAAOwF,EACPzE,IAAK,SAAA2G,GAAQ,OAAI7H,EAAKuG,IAAIT,EAAK+B,YAMzCxG,kBAAC2F,IAAD,CAAMC,QAAM,EAACrF,UAAW3B,EAAQ0G,MAC9BtF,kBAAC6F,IAAD,CACEQ,mBAAiB,EACjBjF,MACEpB,kBAACuC,IAAD,CACEkB,WAAS,EACT3E,MAAOA,EACPmG,YAAY,UACZ7C,SAAU,SAAAQ,GAAK,OAAIsB,EAAStB,EAAMC,OAAO/D,QACzC0D,WAAY,CACVoC,aACE5E,kBAAC6E,IAAD,CAAgBC,SAAS,OACvB9E,kBAACuB,IAAD,CACE4D,SAAoB,KAAVrG,EACV0C,QAAS,WACP7C,EAAKuG,IAAIpG,EAAO,GAChBoF,EAAS,KAEXjD,MAAM,aAENjB,kBAACoF,IAAD,cAShBpF,kBAACgB,IAAD,KAAiBrC,EAAKuC,iBAKtBqF,GAAe7H,oBAAS,YAAc,IAAXC,EAAW,EAAXA,KAC/B,EAAsBE,mBAASF,EAAKG,OAApC,mBAAOwF,EAAP,KAAYmC,EAAZ,KASA,OARApH,qBAAU,WACR,IAAMqH,EAAMC,WAAWrC,EAAK,IACvBsC,OAAOC,MAAMH,GAGhB/H,EAAKmI,QAFLnI,EAAKkB,IAAI6G,KAIV,CAAC/H,EAAM2F,IAERtE,kBAACuC,IAAD,CACEL,MAAOvD,EAAK0B,KACZmD,WAAY7E,EAAKuC,YACjBpC,MAAOwF,EACPyC,KAAK,SACL3E,SAAU,SAAAuB,GAAG,OAAI8C,EAAO9C,EAAId,OAAO/D,aAKnCkI,GAAgBtI,oBAAS,YAAc,IAAXC,EAAW,EAAXA,KAChC,EAAsBE,mBAASF,EAAKG,OAApC,mBAAOwF,EAAP,KAAYmC,EAAZ,KAOA,OANApH,qBAAU,WACR,IAAMqH,EAAMO,SAAS3C,EAAK,IACrBsC,OAAOC,MAAMH,IAChB/H,EAAKkB,IAAI6G,KAEV,CAAC/H,EAAM2F,IAERtE,kBAACuC,IAAD,CACEL,MAAOvD,EAAK0B,KACZmD,WAAY7E,EAAKuC,YACjBpC,MAAOwF,EACPyC,KAAK,SACL3E,SAAU,SAAAuB,GAAG,OAAI8C,EAAO9C,EAAId,OAAO/D,aAKnCoI,GAAgBxI,oBAAS,gBAAGC,EAAH,EAAGA,KAAH,OAC7BqB,kBAACC,IAAD,KACED,kBAACmH,IAAD,CACEjF,MAAOvD,EAAK0B,KACZ+G,QACEpH,kBAACqH,IAAD,CACEC,QAAS3I,EAAKG,MACdsD,SAAU,SAAAuB,GAAG,OAAIhF,EAAKkB,IAAI8D,EAAId,OAAOyE,cAI3CtH,kBAACgB,IAAD,KAAiBrC,EAAKuC,iBAIpBqG,GAAmB7I,oBAAS,YAA0B,IAAvBC,EAAuB,EAAvBA,KAAM6I,EAAiB,EAAjBA,WACnCC,EAAIC,6BAAmBC,qBAAWH,IAClCI,EAAUC,2BACdA,2BAAiBF,qBAAWG,0BAAgBL,EAAG,WAAW,IAC1DpD,KAAI,SAAA0D,GAAC,OAAIA,EAAEjJ,SAEb,OACEkB,kBAACuC,IAAD,CACEzD,MAAOH,EAAKG,MACZoD,MAAOvD,EAAK0B,KACZ2H,QAAM,EAENxE,WAAY7E,EAAKuC,YACjBuC,WAAS,EACTrB,SAAU,SAAAuB,GAAG,OAAIhF,EAAKkB,IAAI8D,EAAId,OAAO/D,SAEpC8I,EAAQvD,KAAI,SAAA4D,GAAG,OACdjI,kBAACkI,IAAD,CAAUzD,IAAKwD,EAAKnJ,MAAOmJ,GACxBA,UAOLE,GAAsBzJ,oBAAS,YAAc,MAAXC,EAAW,EAAXA,KACtC,OACEqB,kBAACoI,eAAD,CACEC,SAAU1J,EAAKG,MACfwJ,YAAa,SAAAD,GAAQ,OAAI1J,EAAKkB,IAAIwI,IAClChI,KAAM1B,EAAK0B,KACXa,YAAavC,EAAKuC,YAClBqH,UAAS,UAAE9I,iBAAOd,GAAMe,qBAAf,aAAEC,EAA4B4I,eAKvCC,GAAkB,CACtBC,OAAQ/E,GACRgF,KAAM9E,GACN+E,aAAcR,GACdS,YAAa3E,GACb4E,eAAgBrD,GAChBsD,UAAWxC,GACXyC,OAAQxC,GACRyC,QAAShC,GACT/F,MAAOgI,GACPC,WAAY3B,GACZ4B,QAASjC,GACTkC,OAAQC,KACRC,oBAAqBD,MAGVE,GAAsBtL,aAAW,SAAAC,GAAK,MAAK,CACtDsL,MAAO,CACLC,QAAS,OACTC,aAAcxL,EAAMqH,QAAQ,GAC5BT,SAAU,YAEZ6E,aAAc,CACZC,MAAO,QAETC,eAAgB,CACdD,MAAO,GACP9I,WAAY5C,EAAMI,QAAQwL,UAAUC,MACpCN,QAAS,OACTO,eAAgB,SAChBC,WAAY,cAwCDC,GApCIxL,oBAAS,YAA0B,IAAvBC,EAAuB,EAAvBA,KAAM6I,EAAiB,EAAjBA,WAC7B5I,EAAU2K,KACRxC,EAASpI,EAAToI,KACJoD,EAAiBxL,EAAKyL,WAAaC,EAAiB7B,GAAgBzB,GAQxE,OAPKoD,IACHpK,QAAQuK,KAARvK,qCAA2CgH,EAA3C,wBACAoD,EAAiBzG,IAEbqD,KAAQyB,IACZzI,QAAQuK,KAARvK,wCAA8CgH,IAG9C/G,kBAACuK,IAAD,CAAOhK,UAAW3B,EAAQ4K,OACxBxJ,yBAAKO,UAAW3B,EAAQ+K,cACtB3J,kBAACmK,EAAD,CAAgBxL,KAAMA,EAAM6I,WAAYA,KAE1CxH,yBAAKO,UAAW3B,EAAQiL,gBACrBlL,EAAK0C,gBAAgBmJ,OACpBxK,kBAACuB,IAAD,CACEhB,UAAW3B,EAAQ6L,aACnBjJ,QAAS,kBACP7C,EAAKyL,WAAazL,EAAK+L,iBAAmB/L,EAAKgM,qBAEjDvJ,MAAK,qBACHzC,EAAKyL,WAAa,gBAAkB,YAEtCnJ,MAAM,aAEJtC,EAAKyL,WAA4CpK,kBAAC8D,GAAD,MAA/B9D,kBAAC4K,IAAD,OAEpB,UC7XGC,GA3BMnM,oBACnB,YAAmD,IAAhDoM,EAAgD,EAAhDA,gBAAiBnM,EAA+B,EAA/BA,KAAMoM,EAAyB,EAAzBA,SAAU3I,EAAe,EAAfA,SAC5BxD,EAAU2K,KAChB,OACEvJ,kBAACuK,IAAD,CAAOhK,UAAW3B,EAAQ4K,OACxBxJ,yBAAKO,UAAW3B,EAAQ+K,cACtB3J,kBAACuC,IAAD,CACEzD,MAAOH,EAAKoI,KACZ7E,MAAM,OACN8F,QAAM,EAENxE,WAAU,kBAAauH,EAAb,WACVtH,WAAS,EACTrB,SAAUA,GAET0I,EAAgBzG,KAAI,SAAA4D,GAAG,OACtBjI,kBAACkI,IAAD,CAAUzD,IAAKwD,EAAKnJ,MAAOmJ,GACxBA,YCEXjK,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrC8M,WAAY,CACV/J,MAAO,QAETgK,KAAM,CACJrK,QAAS1C,EAAMqH,QAAQ,EAAG,EAAG,EAAG,IAElC2F,sBAAuB,CACrBzB,QAAS,QACT7I,QAAS1C,EAAMqH,QAAQ,IAGzB4F,UAAW,CACTC,OAAQ,aAAF,OAAelN,EAAMI,QAAQoK,KAAK2C,cAItCC,GAAS5M,oBAAS,SAAAuD,GACtB,IAQIsJ,EARE3M,EAAUZ,KAEd+M,EAKE9I,EALF8I,SACAvD,EAIEvF,EAJFuF,WACAgE,EAGEvJ,EAHFuJ,OAHF,EAMIvJ,EAFFtD,YAJF,MAIS6M,EAAOT,GAJhB,IAMI9I,EADFwJ,YALF,MAKS,GALT,EAQA,GAAIC,oCAA0BlE,GAAa,CACzC,GAAI7I,EAAK6L,OACP,OAAO7L,EAAK0F,KAAI,SAACsH,EAASC,GACxB,IAAMnH,EAAM,GAAH,OAAMoH,mBAASd,GAAf,YAA4Ba,EAAY,GACjD,OAAO5L,kBAACsL,GAAD,iBAAYrJ,EAAZ,CAAmBwC,IAAKA,EAAK9F,KAAMgN,EAASZ,SAAUtG,QAKjE,IAAMqG,EAAkBgB,+CAAqCtE,GAe7D,OAdIsD,EAAgBN,SAClBe,EACEvL,kBAAC6K,GAAD,CACEC,gBAAiBA,EACjBC,SAAUA,EACVpM,KAAMA,EACNyD,SAAU,SAAAuB,GACJA,EAAId,OAAO/D,QAAUH,EAAKoI,MAC5ByE,EAAOO,aAAahB,EAAU,CAAEhE,KAAMpD,EAAId,OAAO/D,YAOzDkB,kBAACgM,IAAD,CACEC,iBAAe,EACf1L,UAAW3B,EAAQuM,UACnBe,gBAAiB,CAAEC,eAAe,EAAMC,QAAS,MAEjDpM,kBAACqM,IAAD,CACErB,WAAYhL,kBAACsM,IAAD,CAAgB/L,UAAW3B,EAAQoM,cAE/ChL,kBAACuM,IAAD,KAAa,sBAAId,GAAJ,CAAUV,IAAUyB,KAAK,kBAExCxM,kBAACyM,IAAD,CAAkBlM,UAAW3B,EAAQsM,uBAClCK,EACDvL,kBAAC0M,IAAD,KACE1M,kBAAC2M,GAAD,CAAQnB,OAAQ7M,EAAM8M,KAAI,sBAAMA,GAAN,CAAYV,SAOhD,OAAI6B,kCAAwBpF,GAEnBxH,kBAACkK,GAAD,CAAYzF,IAAKsG,EAAUpM,KAAMA,EAAM6I,WAAYA,IAGrD,QAGHmF,GAASjO,oBAAS,YAA2B,IAAxB8M,EAAwB,EAAxBA,OAAwB,IAAhBC,YAAgB,MAAT,GAAS,EAC3CoB,EAAaC,qBAAWtB,GAAQqB,WACtC,OAAO7J,OAAO+J,QAAQF,GAAYxI,KAAI,mCAAE0G,EAAF,KAAYvD,EAAZ,YACpCxH,kBAACsL,GAAD,CACE7G,IAAKsG,EACLA,SAAUA,EACVvD,WAAYA,EACZiE,KAAMA,EACND,OAAQA,UAKRwB,GAAsBtO,oBAAS,YAAe,IAAZuO,EAAY,EAAZA,MAChCrO,EAAUZ,KAIVyG,EAAMwI,EAAMpK,QAAUqK,yBAAeD,EAAMpK,OAAQ,WACnDxC,EAAO4M,EAAMpK,QAAUqK,yBAAeD,EAAMpK,OAAQ,QAC1D,OACE7C,kBAACgM,IAAD,CACEvH,IAAKA,EACLwH,iBAAe,EACf1L,UAAW3B,EAAQuM,UACnBe,gBAAiB,CAAEC,eAAe,EAAMC,QAAS,MAEjDpM,kBAACqM,IAAD,CACErB,WAAYhL,kBAACsM,IAAD,CAAgB/L,UAAW3B,EAAQoM,cAE/ChL,kBAACuM,IAAD,KAAalM,GAAc,kBAE7BL,kBAACyM,IAAD,CACElM,UAAW3B,EAAQsM,sBACnB,cAAY,gBAEV+B,EAAMpK,OAA2B7C,kBAAC2M,GAAD,CAAQnB,OAAQyB,EAAMpK,SAAxC,qBAMVmK","file":"static/js/44.580de7c6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport {\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  Tooltip,\n  IconButton,\n  makeStyles,\n} from '@material-ui/core'\nimport HelpIcon from '@material-ui/icons/Help'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer, PropTypes } from 'mobx-react'\nimport Editor from 'react-simple-code-editor'\n\n// fontSize and fontFamily have to match between Editor and SyntaxHighlighter\nconst fontSize = '12px'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    fontFamily,\n    fontSize,\n  },\n}))\n\nfunction CallbackEditor({ slot }) {\n  const classes = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(null)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      <FormControl>\n        <InputLabel shrink htmlFor=\"callback-editor\">\n          {slot.name}\n        </InputLabel>\n        <Editor\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onValueChange={newCode => setCode(newCode)}\n          highlight={newCode => newCode}\n          padding={10}\n          style={{ background: error ? '#fdd' : undefined }}\n        />\n        {error ? (\n          <FormHelperText\n            style={{ color: '#f00' }}\n          >{`${error}`}</FormHelperText>\n        ) : null}\n        <FormHelperText>{slot.description}</FormHelperText>\n      </FormControl>\n      <Tooltip\n        title={\n          <div>\n            Callbacks are written in Jexl format. Click to learn more.\n            <br /> Names of available context items: {slot.contextVariable}\n          </div>\n        }\n        arrow\n      >\n        <IconButton\n          color=\"primary\"\n          onClick={() => {\n            const newWindow = window.open(\n              'https://github.com/TomFrost/Jexl',\n              '_blank',\n              'noopener,noreferrer',\n            )\n            if (newWindow) {\n              newWindow.opener = null\n            }\n          }}\n        >\n          <HelpIcon />\n        </IconButton>\n      </Tooltip>\n    </>\n  )\n}\nCallbackEditor.propTypes = {\n  slot: PropTypes.objectOrObservableObject.isRequired,\n}\nexport default observer(CallbackEditor)\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ReactPropTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField'\nimport { Color, RGBColor } from 'react-color'\n\nconst ColorPicker = lazy(() => import('./ColorPicker'))\n\n// this is needed because passing a entire color object into the react-color\n// for alpha, can't pass in an rgba string for example\nfunction serializeColor(color: Color) {\n  if (color instanceof Object) {\n    const { r, g, b, a } = color as RGBColor\n    return a === undefined ? `rgb(${r},${g},${b})` : `rgba(${r},${g},${b},${a})`\n  }\n  return color\n}\n\nexport const ColorSlot = (props: {\n  value: string\n  label: string\n  TextFieldProps: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value, label, TextFieldProps, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <>\n      <TextField\n        value={value}\n        label={label}\n        InputProps={{\n          style: {\n            color: value,\n            borderRightWidth: '25px',\n            borderRightStyle: 'solid',\n            borderRightColor: value,\n          },\n        }}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => {\n          onChange(event.target.value)\n        }}\n        {...TextFieldProps}\n      />\n      {displayed ? (\n        <React.Suspense fallback={<div />}>\n          <ColorPicker\n            color={value}\n            onChange={event => {\n              onChange(serializeColor(event.rgb))\n            }}\n          />\n        </React.Suspense>\n      ) : null}\n    </>\n  )\n}\nColorSlot.propTypes = {\n  onChange: ReactPropTypes.func.isRequired,\n  label: ReactPropTypes.string,\n  TextFieldProps: ReactPropTypes.shape({}),\n  value: ReactPropTypes.string,\n}\nColorSlot.defaultProps = {\n  label: '',\n  value: '#000',\n  TextFieldProps: {},\n}\n\nfunction ColorEditorSlot(props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={(color: string) => {\n        slot.set(color)\n      }}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n}\nColorEditorSlot.propTypes = {\n  slot: ReactPropTypes.shape({\n    name: ReactPropTypes.string.isRequired,\n    description: ReactPropTypes.string,\n    value: ReactPropTypes.string.isRequired,\n    set: ReactPropTypes.func.isRequired,\n  }).isRequired,\n}\nexport default observer(ColorEditorSlot)\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, getEnv } from 'mobx-state-tree'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getPropertyType,\n  getSubType,\n  getUnionSubTypes,\n} from '@jbrowse/core/util/mst-reflection'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  MenuItem,\n  Paper,\n  SvgIcon,\n  TextField,\n  makeStyles,\n} from '@material-ui/core'\n\n// icons\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport AddIcon from '@material-ui/icons/Add'\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\n\n// locals\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\n\nconst StringEditor = observer(({ slot }) => (\n  <TextField\n    label={slot.name}\n    // error={filterError}\n    helperText={slot.description}\n    fullWidth\n    value={slot.value}\n    onChange={evt => slot.set(evt.target.value)}\n  />\n))\n\nconst TextEditor = observer(({ slot }) => (\n  <TextField\n    label={slot.name}\n    helperText={slot.description}\n    fullWidth\n    multiline\n    value={slot.value}\n    onChange={evt => slot.set(evt.target.value)}\n  />\n))\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst StringArrayEditor = observer(({ slot }) => {\n  const [value, setValue] = useState('')\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={idx} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      color=\"secondary\"\n                      onClick={() => slot.removeAtIndex(idx)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </ListItem>\n        ))}\n        <ListItem disableGutters>\n          <TextField\n            value={value}\n            placeholder=\"add new\"\n            onChange={event => setValue(event.target.value)}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => {\n                      slot.add(value)\n                      setValue('')\n                    }}\n                    disabled={value === ''}\n                    color=\"secondary\"\n                    data-testid={`stringArrayAdd-${slot.name}`}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </ListItem>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst useMapEditorStyles = makeStyles(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(({ slot }) => {\n  const classes = useMapEditorStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx, strValue) => {\n                  slot.setAtKeyIndex(key, idx, strValue)\n                },\n                removeAtIndex: idx => {\n                  slot.removeAtKeyIndex(key, idx)\n                },\n                add: strValue => {\n                  slot.addToKey(key, strValue)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, [])\n                        setValue('')\n                      }}\n                      color=\"secondary\"\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst NumberMapEditor = observer(({ slot }) => {\n  const classes = useMapEditorStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: numValue => slot.add(key, numValue),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, 0)\n                        setValue('')\n                      }}\n                      color=\"secondary\"\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst NumberEditor = observer(({ slot }) => {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseFloat(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    } else {\n      slot.reset()\n    }\n  }, [slot, val])\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst IntegerEditor = observer(({ slot }) => {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst booleanEditor = observer(({ slot }) => (\n  <FormControl>\n    <FormControlLabel\n      label={slot.name}\n      control={\n        <Checkbox\n          checked={slot.value}\n          onChange={evt => slot.set(evt.target.checked)}\n        />\n      }\n    />\n    <FormHelperText>{slot.description}</FormHelperText>\n  </FormControl>\n))\n\nconst stringEnumEditor = observer(({ slot, slotSchema }) => {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(getPropertyType(p, 'value')))[1],\n  ).map(t => t.value)\n\n  return (\n    <TextField\n      value={slot.value}\n      label={slot.name}\n      select\n      // error={filterError}\n      helperText={slot.description}\n      fullWidth\n      onChange={evt => slot.set(evt.target.value)}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(({ slot }) => {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => slot.set(location)}\n      name={slot.name}\n      description={slot.description}\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: stringEnumEditor,\n  boolean: booleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nexport const useSlotEditorStyles = makeStyles(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n\nconst SlotEditor = observer(({ slot, slotSchema }) => {\n  const classes = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback ? CallbackEditor : valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            className={classes.slotModeIcon}\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n            color=\"secondary\"\n          >\n            {!slot.isCallback ? <RadioButtonUncheckedIcon /> : <SvgCheckbox />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport { observer } from 'mobx-react'\nimport React from 'react'\nimport { useSlotEditorStyles } from './SlotEditor'\n\nconst TypeSelector = observer(\n  ({ typeNameChoices, slot, slotName, onChange }) => {\n    const classes = useSlotEditorStyles()\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <TextField\n            value={slot.type}\n            label=\"Type\"\n            select\n            // error={filterError}\n            helperText={`Type of ${slotName} to use`}\n            fullWidth\n            onChange={onChange}\n          >\n            {typeNameChoices.map(str => (\n              <MenuItem key={str} value={str}>\n                {str}\n              </MenuItem>\n            ))}\n          </TextField>\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default TypeSelector\n","import React from 'react'\nimport {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n} from '@jbrowse/core/configuration'\nimport {\n  FormGroup,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { observer } from 'mobx-react'\nimport { getMembers } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\n\n// icons\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\n// locals\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\n\nconst useStyles = makeStyles(theme => ({\n  expandIcon: {\n    color: '#fff',\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n}))\n\nconst Member = observer(props => {\n  const classes = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  let typeSelector\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot, slotIndex) => {\n        const key = `${singular(slotName)} ${slotIndex + 1}`\n        return <Member {...props} key={key} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    if (typeNameChoices.length) {\n      typeSelector = (\n        <TypeSelector\n          typeNameChoices={typeNameChoices}\n          slotName={slotName}\n          slot={slot}\n          onChange={evt => {\n            if (evt.target.value !== slot.type) {\n              schema.setSubschema(slotName, { type: evt.target.value })\n            }\n          }}\n        />\n      )\n    }\n    return (\n      <Accordion\n        defaultExpanded\n        className={classes.accordion}\n        TransitionProps={{ unmountOnExit: true, timeout: 150 }}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n        >\n          <Typography>{[...path, slotName].join('🡒')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeSelector}\n          <FormGroup>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  }\n\n  if (isConfigurationSlotType(slotSchema)) {\n    // this is a regular config slot\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  }\n\n  return null\n})\n\nconst Schema = observer(({ schema, path = [] }) => {\n  const properties = getMembers(schema).properties\n  return Object.entries(properties).map(([slotName, slotSchema]) => (\n    <Member\n      key={slotName}\n      slotName={slotName}\n      slotSchema={slotSchema}\n      path={path}\n      schema={schema}\n    />\n  ))\n})\n\nconst ConfigurationEditor = observer(({ model }) => {\n  const classes = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used\n  // for different tracks since only the backing model changes for example\n  // see pr #804\n  const key = model.target && readConfObject(model.target, 'trackId')\n  const name = model.target && readConfObject(model.target, 'name')\n  return (\n    <Accordion\n      key={key}\n      defaultExpanded\n      className={classes.accordion}\n      TransitionProps={{ unmountOnExit: true, timeout: 150 }}\n    >\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n      >\n        <Typography>{name ? name : 'Configuration'}</Typography>\n      </AccordionSummary>\n      <AccordionDetails\n        className={classes.expansionPanelDetails}\n        data-testid=\"configEditor\"\n      >\n        {!model.target ? 'no target set' : <Schema schema={model.target} />}\n      </AccordionDetails>\n    </Accordion>\n  )\n})\n\nexport default ConfigurationEditor\n"],"sourceRoot":""}