{"version":3,"sources":["../../../plugins/wiggle/src/BigWigAdapter/BigWigAdapter.ts"],"names":["BigWigAdapter","config","getSubAdapter","pluginManager","bigwig","BigWig","filehandle","openLocation","readConfObject","opts","statusCallback","this","getHeader","result","setup","header","Object","keys","refsByName","refId","h","refsByNumber","name","undefined","rectifyStats","totalSummary","region","refName","start","end","bpPerPx","signal","resolution","ObservableCreate","observer","a","getFeatureStream","basesPerSpan","pipe","mergeAll","map","record","SimpleFeature","id","data","subscribe","BaseFeatureDataAdapter","capabilities"],"mappings":"6TAsBqBA,E,kDASnB,WACEC,EACAC,EACAC,GACA,kCACA,cAAMF,EAAQC,EAAeC,IAbvBC,YAYN,EAEA,EAAKA,OAAS,IAAIC,SAAO,CACvBC,WAAYC,uBACVC,yBAAeP,EAAQ,kBACvB,EAAKE,iBALT,E,gFAUF,WAAoBM,GAApB,qFACwCA,GAAQ,IAAtCC,uBADV,MAC2B,aAD3B,GAEiB,6BAFjB,SAGuBC,KAAKP,OAAOQ,UAAUH,GAH7C,cAGQI,EAHR,OAIEH,EAAe,IAJjB,kBAKSG,GALT,gD,uHAQA,WAAyBJ,GAAzB,uFACuBE,KAAKG,MAAML,GADlC,cACQM,EADR,yBAESC,OAAOC,KAAKF,EAAOG,aAF5B,gD,uHAKA,WAAyBC,GAAzB,uFACkBR,KAAKG,QADvB,cACQM,EADR,0BAEUA,EAAEC,aAAaF,IAAU,CAAEG,UAAMC,IAAaD,MAFxD,gD,0HAKA,WAA4Bb,GAA5B,uFACuBE,KAAKG,MAAML,GADlC,cACQM,EADR,yBAESS,YAAaT,EAAOU,eAF7B,gD,gFAKA,SAAmBC,GAAoD,WAA1BjB,EAA0B,uDAAJ,GACzDkB,EAAwBD,EAAxBC,QAASC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,IACxB,EAKIpB,EAJFqB,eADF,MACY,EADZ,EAEEC,EAGEtB,EAHFsB,OAFF,EAKItB,EAFFuB,kBAHF,MAGe,EAHf,IAKIvB,EADFC,sBAJF,MAImB,aAJnB,EAMA,OAAOuB,2BAAgB,uCAAU,WAAMC,GAAN,SAAAC,EAAA,6DAC/BzB,EAAe,2BADgB,SAEd,EAAKN,OAAOgC,iBAAiBT,EAASC,EAAOC,EAA7C,2BACZpB,GADY,IAEf4B,aAAcP,EAAUE,KAJK,cAM5BM,KACDC,cACAC,aAAI,SAACC,GACH,OAAO,IAAIC,IAAc,CACvBC,GAAI,GAAF,OAAKhB,EAAL,YAAgBc,EAAOb,MAAvB,YAAgCa,EAAOZ,KACzCe,KAAM,2BAAKH,GAAP,IAAed,kBAGvBkB,UAAUX,GAdmB,2CAAV,sDAepBH,K,2BAGL,gB,GAxEyCe,0BAAtB9C,EAGL+C,aAAe,CAC3B,gBACA,gBACA,mB","file":"static/js/41.515e985c.chunk.js","sourcesContent":["import { BigWig, Feature as BBIFeature } from '@gmod/bbi'\nimport {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { map, mergeAll } from 'rxjs/operators'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Instance } from 'mobx-state-tree'\nimport { rectifyStats, UnrectifiedFeatureStats } from '@jbrowse/core/util/stats'\nimport PluginManager from '@jbrowse/core/PluginManager'\n\nimport configSchema from './configSchema'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\ninterface WiggleOptions extends BaseOptions {\n  resolution?: number\n}\n\nexport default class BigWigAdapter extends BaseFeatureDataAdapter {\n  private bigwig: BigWig\n\n  public static capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n  ]\n\n  public constructor(\n    config: Instance<typeof configSchema>,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    this.bigwig = new BigWig({\n      filehandle: openLocation(\n        readConfObject(config, 'bigWigLocation'),\n        this.pluginManager,\n      ),\n    })\n  }\n\n  private async setup(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    statusCallback('Downloading bigwig header')\n    const result = await this.bigwig.getHeader(opts)\n    statusCallback('')\n    return result\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const header = await this.setup(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  public async refIdToName(refId: number) {\n    const h = await this.setup()\n    return (h.refsByNumber[refId] || { name: undefined }).name\n  }\n\n  public async getGlobalStats(opts?: BaseOptions) {\n    const header = await this.setup(opts)\n    return rectifyStats(header.totalSummary as UnrectifiedFeatureStats)\n  }\n\n  public getFeatures(region: NoAssemblyRegion, opts: WiggleOptions = {}) {\n    const { refName, start, end } = region\n    const {\n      bpPerPx = 0,\n      signal,\n      resolution = 1,\n      statusCallback = () => {},\n    } = opts\n    return ObservableCreate<Feature>(async observer => {\n      statusCallback('Downloading bigwig data')\n      const ob = await this.bigwig.getFeatureStream(refName, start, end, {\n        ...opts,\n        basesPerSpan: bpPerPx / resolution,\n      })\n      ob.pipe(\n        mergeAll(),\n        map((record: BBIFeature) => {\n          return new SimpleFeature({\n            id: `${refName}:${record.start}-${record.end}`,\n            data: { ...record, refName },\n          })\n        }),\n      ).subscribe(observer)\n    }, signal)\n  }\n\n  public freeResources(): void {}\n}\n"],"sourceRoot":""}