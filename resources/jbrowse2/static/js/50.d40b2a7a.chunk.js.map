{"version":3,"sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.js","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.js","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.js","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.js"],"names":["useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","fontFamily","fontSize","observer","slot","classes","useState","code","setCode","error","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","stringToJexlExpression","getEnv","e","shrink","htmlFor","className","value","onValueChange","newCode","highlight","padding","style","background","undefined","title","arrow","color","onClick","newWindow","window","ColorPicker","lazy","ColorSlot","props","label","TextFieldProps","onChange","displayed","setDisplayed","TextField","InputProps","borderRightWidth","borderRightStyle","borderRightColor","event","target","Suspense","fallback","Object","r","g","b","a","serializeColor","rgb","defaultProps","name","set","helperText","description","fullWidth","StringEditor","evt","TextEditor","multiline","SvgCheckbox","d","StringArrayEditor","setValue","disablePadding","key","disableGutters","endAdornment","position","placeholder","disabled","useMapEditorStyles","card","StringArrayMapEditor","Array","val","raised","action","setAtIndex","removeAtIndex","idx","add","strValue","disableTypography","NumberMapEditor","numValue","NumberEditor","setVal","num","parseFloat","Number","type","IntegerEditor","parseInt","booleanEditor","control","checked","stringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","getPropertyType","t","select","str","FileSelectorWrapper","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","numberMap","number","integer","stringEnum","boolean","frozen","configRelationships","JsonEditor","useSlotEditorStyles","paper","display","marginBottom","overflow","paperContent","flex","slotModeSwitch","width","justifyContent","alignItems","ValueComponent","console","typeNameChoices","slotName","subSchemaContainer","marginLeft","borderLeft","paddingLeft","root","overflowX","Member","schema","isConfigurationSchemaType","singular","slotIndex","getTypeNamesFromExplicitlyTypedUnion","typeSelector","isConfigurationSlotType","Schema","iterMap","getMembers","ConfigurationEditor","model","readConfObject"],"mappings":"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","file":"static/js/50.d40b2a7a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport IconButton from '@material-ui/core/IconButton'\nimport HelpIcon from '@material-ui/icons/Help'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer, PropTypes } from 'mobx-react'\nimport Editor from 'react-simple-code-editor'\n\n// fontSize and fontFamily have to match between Editor and SyntaxHighlighter\nconst fontSize = '12px'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    fontFamily,\n    fontSize,\n  },\n}))\n\nfunction CallbackEditor({ slot }) {\n  const classes = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode) // slot.set `jexl:${debouncedCode}`\n      setCodeError(null)\n    } catch (e) {\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      <FormControl>\n        <InputLabel shrink htmlFor=\"callback-editor\">\n          {slot.name}\n        </InputLabel>\n        <Editor\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onValueChange={newCode => {\n            setCode(newCode)\n          }}\n          highlight={newCode => newCode}\n          padding={10}\n          style={{ background: error ? '#fdd' : undefined }}\n        />\n        <FormHelperText>{slot.description}</FormHelperText>\n      </FormControl>\n      <Tooltip\n        title={\n          <div>\n            Callbacks are written in Jexl format. Click to learn more.\n            <br /> Names of available context items: {slot.contextVariable}\n          </div>\n        }\n        arrow\n      >\n        <IconButton\n          color=\"primary\"\n          onClick={() => {\n            const newWindow = window.open(\n              'https://github.com/TomFrost/Jexl',\n              '_blank',\n              'noopener,noreferrer',\n            )\n            if (newWindow) {\n              newWindow.opener = null\n            }\n          }}\n        >\n          <HelpIcon />\n        </IconButton>\n      </Tooltip>\n    </>\n  )\n}\nCallbackEditor.propTypes = {\n  slot: PropTypes.objectOrObservableObject.isRequired,\n}\nexport default observer(CallbackEditor)\n","import React, { lazy, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ReactPropTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField'\nimport { Color, RGBColor } from 'react-color'\n\nconst ColorPicker = lazy(() => import('./ColorPicker'))\n\n// this is needed because passing a entire color object into the react-color\n// for alpha, can't pass in an rgba string for example\nfunction serializeColor(color: Color) {\n  if (color instanceof Object) {\n    const { r, g, b, a } = color as RGBColor\n    return `rgb(${r},${g},${b},${a})`\n  }\n  return color\n}\n\nexport const ColorSlot = (props: {\n  value: string\n  label: string\n  TextFieldProps: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value, label, TextFieldProps, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <>\n      <TextField\n        value={value}\n        label={label}\n        InputProps={{\n          style: {\n            color: value,\n            borderRightWidth: '25px',\n            borderRightStyle: 'solid',\n            borderRightColor: value,\n          },\n        }}\n        onClick={() => setDisplayed(!displayed)}\n        onChange={event => {\n          onChange(event.target.value)\n        }}\n        {...TextFieldProps}\n      />\n      {displayed ? (\n        <React.Suspense fallback={<div />}>\n          <ColorPicker\n            color={value}\n            onChange={event => {\n              onChange(serializeColor(event.rgb))\n            }}\n          />\n        </React.Suspense>\n      ) : null}\n    </>\n  )\n}\nColorSlot.propTypes = {\n  onChange: ReactPropTypes.func.isRequired,\n  label: ReactPropTypes.string,\n  TextFieldProps: ReactPropTypes.shape({}),\n  value: ReactPropTypes.string,\n}\nColorSlot.defaultProps = {\n  label: '',\n  value: '#000',\n  TextFieldProps: {},\n}\n\nfunction ColorEditorSlot(props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={(color: string) => {\n        slot.set(color)\n      }}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n}\nColorEditorSlot.propTypes = {\n  slot: ReactPropTypes.shape({\n    name: ReactPropTypes.string.isRequired,\n    description: ReactPropTypes.string,\n    value: ReactPropTypes.string.isRequired,\n    set: ReactPropTypes.func.isRequired,\n  }).isRequired,\n}\nexport default observer(ColorEditorSlot)\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, getEnv } from 'mobx-state-tree'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getPropertyType,\n  getSubType,\n  getUnionSubTypes,\n} from '@jbrowse/core/util/mst-reflection'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  MenuItem,\n  Paper,\n  SvgIcon,\n  TextField,\n  makeStyles,\n} from '@material-ui/core'\n\n// icons\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport AddIcon from '@material-ui/icons/Add'\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\n\n// locals\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\n\nconst StringEditor = observer(({ slot }) => (\n  <TextField\n    label={slot.name}\n    // error={filterError}\n    helperText={slot.description}\n    fullWidth\n    value={slot.value}\n    onChange={evt => slot.set(evt.target.value)}\n  />\n))\n\nconst TextEditor = observer(({ slot }) => (\n  <TextField\n    label={slot.name}\n    helperText={slot.description}\n    fullWidth\n    multiline\n    value={slot.value}\n    onChange={evt => slot.set(evt.target.value)}\n  />\n))\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst StringArrayEditor = observer(({ slot }) => {\n  const [value, setValue] = useState('')\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={idx} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => slot.setAtIndex(idx, evt.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      color=\"secondary\"\n                      onClick={() => slot.removeAtIndex(idx)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </ListItem>\n        ))}\n        <ListItem disableGutters>\n          <TextField\n            value={value}\n            placeholder=\"add new\"\n            onChange={event => setValue(event.target.value)}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => {\n                      slot.add(value)\n                      setValue('')\n                    }}\n                    disabled={value === ''}\n                    color=\"secondary\"\n                    data-testid={`stringArrayAdd-${slot.name}`}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </ListItem>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst useMapEditorStyles = makeStyles(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(({ slot }) => {\n  const classes = useMapEditorStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx, strValue) => {\n                  slot.setAtKeyIndex(key, idx, strValue)\n                },\n                removeAtIndex: idx => {\n                  slot.removeAtKeyIndex(key, idx)\n                },\n                add: strValue => {\n                  slot.addToKey(key, strValue)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, [])\n                        setValue('')\n                      }}\n                      color=\"secondary\"\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst NumberMapEditor = observer(({ slot }) => {\n  const classes = useMapEditorStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {Array.from(slot.value, ([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton color=\"secondary\" onClick={() => slot.remove(key)}>\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: numValue => slot.add(key, numValue),\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => setValue(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      disabled={value === ''}\n                      onClick={() => {\n                        slot.add(value, 0)\n                        setValue('')\n                      }}\n                      color=\"secondary\"\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nconst NumberEditor = observer(({ slot }) => {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseFloat(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    } else {\n      slot.reset()\n    }\n  }, [slot, val])\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst IntegerEditor = observer(({ slot }) => {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => setVal(evt.target.value)}\n    />\n  )\n})\n\nconst booleanEditor = observer(({ slot }) => (\n  <FormControl>\n    <FormControlLabel\n      label={slot.name}\n      control={\n        <Checkbox\n          checked={slot.value}\n          onChange={evt => slot.set(evt.target.checked)}\n        />\n      }\n    />\n    <FormHelperText>{slot.description}</FormHelperText>\n  </FormControl>\n))\n\nconst stringEnumEditor = observer(({ slot, slotSchema }) => {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(getPropertyType(p, 'value')))[1],\n  ).map(t => t.value)\n\n  return (\n    <TextField\n      value={slot.value}\n      label={slot.name}\n      select\n      // error={filterError}\n      helperText={slot.description}\n      fullWidth\n      onChange={evt => slot.set(evt.target.value)}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(({ slot }) => {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => slot.set(location)}\n      name={slot.name}\n      description={slot.description}\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: stringEnumEditor,\n  boolean: booleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nexport const useSlotEditorStyles = makeStyles(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n    overflow: 'visible',\n  },\n  paperContent: {\n    flex: 'auto',\n    padding: theme.spacing(1),\n    overflow: 'auto',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n\nconst SlotEditor = observer(({ slot, slotSchema }) => {\n  const classes = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback ? CallbackEditor : valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            className={classes.slotModeIcon}\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n            color=\"secondary\"\n          >\n            {!slot.isCallback ? <RadioButtonUncheckedIcon /> : <SvgCheckbox />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport { observer } from 'mobx-react'\nimport React from 'react'\nimport { useSlotEditorStyles } from './SlotEditor'\n\nconst TypeSelector = observer(\n  ({ typeNameChoices, slot, slotName, onChange }) => {\n    const classes = useSlotEditorStyles()\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.paperContent}>\n          <TextField\n            value={slot.type}\n            label=\"Type\"\n            select\n            // error={filterError}\n            helperText={`Type of ${slotName} to use`}\n            fullWidth\n            onChange={onChange}\n          >\n            {typeNameChoices.map(str => (\n              <MenuItem key={str} value={str}>\n                {str}\n              </MenuItem>\n            ))}\n          </TextField>\n        </div>\n      </Paper>\n    )\n  },\n)\n\nexport default TypeSelector\n","import {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n} from '@jbrowse/core/configuration'\n\nimport { iterMap } from '@jbrowse/core/util'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { observer } from 'mobx-react'\nimport { getMembers } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\nimport React from 'react'\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\n\nconst useStyles = makeStyles(theme => ({\n  subSchemaContainer: {\n    marginLeft: theme.spacing(1),\n    borderLeft: `1px solid ${theme.palette.secondary.main}`,\n    paddingLeft: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  root: {\n    padding: theme.spacing(1, 3, 1, 1),\n    background: theme.palette.background.default,\n    overflowX: 'hidden',\n  },\n}))\n\nconst Member = observer(props => {\n  const classes = useStyles()\n  const { slotName, slotSchema, schema, slot = schema[slotName] } = props\n  let typeSelector\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return (\n        <>\n          {slot.map((subslot, slotIndex) => {\n            const key = `${singular(slotName)} ${slotIndex + 1}`\n            return <Member {...props} key={key} slot={subslot} slotName={key} />\n          })}\n        </>\n      )\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    if (typeNameChoices.length) {\n      typeSelector = (\n        <TypeSelector\n          typeNameChoices={typeNameChoices}\n          slotName={slotName}\n          slot={slot}\n          onChange={evt => {\n            if (evt.target.value !== slot.type) {\n              schema.setSubschema(slotName, { type: evt.target.value })\n            }\n          }}\n        />\n      )\n    }\n    return (\n      <>\n        <FormLabel>{slotName}</FormLabel>\n        <div className={classes.subSchemaContainer}>\n          {typeSelector}\n          <FormGroup>\n            <Schema schema={slot} />\n          </FormGroup>\n        </div>\n      </>\n    )\n  }\n\n  if (isConfigurationSlotType(slotSchema)) {\n    // this is a regular config slot\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  }\n\n  return null\n})\n\nconst Schema = observer(({ schema }) => {\n  return iterMap(\n    Object.entries(getMembers(schema).properties),\n    ([slotName, slotSchema]) => (\n      <Member key={slotName} {...{ slotName, slotSchema, schema }} />\n    ),\n  )\n})\n\nconst ConfigurationEditor = observer(({ model }) => {\n  const classes = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used\n  // for different tracks since only the backing model changes for example\n  // see pr #804\n  const key = model.target && readConfObject(model.target, 'trackId')\n  return (\n    <div className={classes.root} key={key} data-testid=\"configEditor\">\n      {!model.target ? 'no target set' : <Schema schema={model.target} />}\n    </div>\n  )\n})\n\nexport default ConfigurationEditor\n"],"sourceRoot":""}