{"version":3,"sources":["../../../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../../../node_modules/es6-promisify/dist/promisify.js","../../../node_modules/@gmod/indexedfasta/dist/localFile.js","../../../node_modules/@gmod/indexedfasta/dist/indexedFasta.js","../../../node_modules/@gmod/indexedfasta/dist/index.js","../../../node_modules/@babel/runtime/helpers/toArray.js","../../../node_modules/browser-or-node/lib/index.js","../../../node_modules/@gmod/indexedfasta/dist/bgzipIndexedFasta.js","../../../plugins/sequence/src/IndexedFastaAdapter/IndexedFastaAdapter.ts","../../../plugins/sequence/src/BgzipFastaAdapter/BgzipFastaAdapter.ts","../../../node_modules/pako/lib/utils/common.js","../../../node_modules/pako/lib/zlib/messages.js","../../../node_modules/long/src/long.js","../../../node_modules/pako/lib/zlib/adler32.js","../../../node_modules/pako/lib/zlib/crc32.js","../../../node_modules/pako/lib/zlib/zstream.js","../../../node_modules/pako/lib/zlib/constants.js","../../../node_modules/@gmod/bgzf-filehandle/dist/unzip-pako.js","../../../node_modules/pako/lib/utils/strings.js","../../../node_modules/@gmod/bgzf-filehandle/dist/localFile.js","../../../node_modules/@gmod/bgzf-filehandle/dist/index.js","../../../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../../../node_modules/pako/lib/zlib/deflate.js","../../../node_modules/pako/lib/zlib/trees.js","../../../node_modules/pako/lib/zlib/inflate.js","../../../node_modules/pako/lib/zlib/inffast.js","../../../node_modules/pako/lib/zlib/inftrees.js","../../../node_modules/@babel/runtime/helpers/inherits.js","../../../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../../../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../../../node_modules/@gmod/bgzf-filehandle/dist/bgzFilehandle.js","../../../node_modules/pako/index.js","../../../node_modules/pako/lib/deflate.js","../../../node_modules/pako/lib/inflate.js","../../../node_modules/pako/lib/zlib/gzheader.js","../../../node_modules/@gmod/bgzf-filehandle/dist/gziIndex.js"],"names":["module","exports","self","ReferenceError","__esModule","Object","defineProperty","value","promisify","customArgumentsToken","original","TypeError","argumentNames","ES6Promise","Promise","Error","_this","this","_len","arguments","length","args","Array","_key","resolve","reject","push","err","_len2","values","_key2","o","forEach","index","name","apply","undefined","_interopRequireDefault","require","default","fsOpen","fsRead","fsFStat","fsReadFile","_regenerator","_typeof2","_asyncToGenerator2","_classCallCheck2","_createClass2","isNode","fs","open","read","fstat","readFile","LocalFile","source","position","filename","fd","key","_read","mark","_callee","buffer","offset","ret","_args","wrap","_context","prev","next","t0","t1","sent","t2","t3","t4","t5","abrupt","bytesRead","stop","_x","_readFile","_callee2","_context2","_stat","_callee3","_context3","_localFile","_faiOffset","idx","pos","lineBytes","Math","floor","lineLength","IndexedFasta","_ref","fasta","fai","path","faiPath","_ref$chunkSizeLimit","chunkSizeLimit","concat","_getIndexes2","opts","indexes","_readFAI","_readFAI2","text","idCounter","currSeq","data","toString","split","filter","line","test","map","row","id","start","end","fromEntries","entry","_x2","_getSequenceNames","_getIndexes","keys","call","_x3","_getSequenceSizes","_callee4","returnObject","vals","i","_context4","_x4","_getSequenceSize","_callee5","seqName","_context5","_x5","_x6","_hasReferenceSequence","_callee6","_context6","_x7","_x8","_getResiduesById","_callee7","seqId","min","max","indexEntry","_context7","_fetchFromIndexEntry","_x9","_x10","_x11","_x12","_getResiduesByName","_callee8","_context8","_x13","_x14","_x15","_x16","_getSequence","_callee9","_args9","_context9","getResiduesByName","_fetchFromIndexEntry2","_callee10","readlen","residues","_args10","_context10","toLocaleString","Buffer","allocUnsafe","replace","_x17","parseSmallFasta","enumerable","get","_bgzipIndexedFasta","_indexedFasta","FetchableSmallFasta","_toArray2","_object","t","entryText","_entryText$split","_entryText$split2","defLine","seqLines","slice","_defLine$split","_defLine$split2","description","sequence","join","shim","then","_fetch","find","iter","substr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","arr","_typeof","Symbol","iterator","obj","constructor","prototype","isBrowser","window","document","isWebWorker","process","versions","node","isJsDom","navigator","userAgent","includes","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_bgzfFilehandle","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","e","_isNativeReflectConstruct","result","Super","NewTarget","BgzipIndexedFasta","_IndexedFasta","_super","gzi","gziPath","BgzfFilehandle","filehandle","gziFilehandle","config","getSubAdapter","pluginManager","seqCache","AbortablePromiseCache","cache","LRU","maxSize","fill","signal","a","refName","getSequence","fastaLocation","readConfObject","faiLocation","fastaOpts","openLocation","getSequenceNames","getSequenceSizes","seqSizes","region","ObservableCreate","observer","getSequenceSize","size","regionEnd","chunks","chunkSize","chunkStart","s","r","JSON","stringify","all","seq","SimpleFeature","complete","BaseFeatureDataAdapter","gziLocation","TYPED_OK","Uint8Array","Uint16Array","Int32Array","_has","hasOwnProperty","assign","sources","shift","p","shrinkBuf","buf","subarray","fnTyped","arraySet","dest","src","src_offs","len","dest_offs","set","flattenChunks","l","chunk","fnUntyped","setTyped","on","Buf8","Buf16","Buf32","Long","wasm","WebAssembly","Instance","Module","low","high","unsigned","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","RangeError","indexOf","substring","radixToPower","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","adler","s1","s2","n","crcTable","c","table","k","makeTable","crc","input","next_in","avail_in","total_in","output","next_out","avail_out","total_out","msg","state","data_type","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","_require","Inflate","unzip","_unzip","inputData","strm","inflator","remainingInput","from","message","match","_unzipChunk","cpos","dpos","blocks","cpositions","dpositions","_buffer","_unzipChunkSlice","decompressedBlocks","_buffer2","origCpos","minv","blockPosition","dataPosition","maxv","unzipChunk","unzipChunkSlice","pakoUnzip","nodeUnzip","utils","STR_APPLY_OK","STR_APPLY_UIA_OK","String","fromCharCode","__","_utf8len","q","buf2binstring","string2buf","c2","m_pos","str_len","buf_len","charCodeAt","binstring2buf","buf2string","out","c_len","utf16buf","utf8border","fdPromise","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","configuration_table","trees","adler32","crc32","MAX_MATCH","MIN_LOOKAHEAD","HCRC_STATE","BUSY_STATE","FINISH_STATE","errorCode","rank","f","zero","flush_pending","pending","pending_buf","pending_out","flush_block_only","last","_tr_flush_block","block_start","strstart","put_byte","b","putShortMSB","read_buf","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","m","more","_w_size","window_size","hash_size","head","insert","ins_h","hash_shift","hash_mask","deflate_fast","flush","hash_head","bflush","match_length","_tr_tally","max_lazy_match","MIN_MATCH","last_lit","deflate_slow","max_insert","prev_match","strategy","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","DeflateState","status","pending_buf_size","gzhead","gzindex","method","last_flush","w_bits","hash_bits","level","dyn_ltree","HEAP_SIZE","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","deflateResetKeep","_tr_init","deflateReset","deflateInit2","windowBits","memLevel","max_block_size","max_start","deflateInit","deflateSetHeader","deflate","old_flush","beg","hcrc","extra","comment","time","os","header","bstate","deflate_huff","deflate_rle","_tr_align","_tr_stored_block","deflateEnd","deflateSetDictionary","dictionary","avail","tmpDict","dictLength","deflateInfo","LITERALS","L_CODES","D_CODES","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","_dist_code","_length_code","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","w","send_bits","send_code","tree","bi_reverse","code","gen_codes","bits","next_code","init_block","END_BLOCK","bi_windup","smaller","_n2","_m2","pqdownheap","v","j","compress_block","ltree","dtree","lc","lx","build_tree","desc","stree","h","xbits","base","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","stored_len","copy_block","LENGTH_CODES","tr_static_init","opt_lenb","static_lenb","max_blindex","black_mask","detect_data_type","BL_CODES","build_bl_tree","lcodes","dcodes","blcodes","send_all_trees","STATIC_TREES","bi_flush","inflate_fast","inflate_table","TYPE","BAD","zswap32","InflateState","mode","havedict","flags","dmax","check","total","wbits","wsize","whave","wnext","hold","lencode","distcode","lenbits","distbits","ncode","nlen","ndist","have","lens","work","lendyn","distdyn","sane","back","was","inflateResetKeep","inflateReset","inflateReset2","inflateInit2","lenfix","distfix","virgin","fixedtables","sym","updatewindow","copy","inflateInit","inflate","put","left","_in","_out","from_source","here_bits","here_op","here_val","last_bits","last_op","last_val","here","hbuf","order","inf_leave","done","xflags","extra_len","inflateEnd","inflateGetHeader","inflateSetDictionary","inflateInfo","s_window","lcode","dcode","lmask","dmask","op","top","dolen","dodist","MAXBITS","lbase","lext","dbase","dext","type","lens_index","codes","table_index","incr","mask","root","curr","drop","used","huff","base_index","offs","extra_index","subClass","superClass","create","writable","configurable","assertThisInitialized","_setPrototypeOf","_slicedToArray2","GziIndex","BgzFilehandle","compressedStat","stat","getUncompressedFileSize","blksize","_getUncompressedFileSize","_ref2","_ref3","uncompressedPosition","_ref4","_ref5","lastBlockUncompressedSize","getLastBlock","readUInt32LE","_readAndUncompressBlock2","blockBuffer","_ref6","_ref7","_ref8","compressedPosition","_ref9","nextCompressedPosition","blockCompressedLength","unzippedBuffer","blockPositions","destinationOffset","blockNum","uncompressedBuffer","_blockPositions$block","sourceOffset","sourceEnd","getRelevantBlocksForRead","_readAndUncompressBlock","pako","zlib_deflate","strings","ZStream","Deflate","options","to","opt","raw","gzip","ended","dict","_dict_set","deflator","_mode","onEnd","onData","deflateRaw","zlib_inflate","GZheader","next_out_utf8","tail","utf8str","allowBufError","inflateRaw","ungzip","long","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","_readIndex","_readIndex2","numEntries","entries","bufSize","entryNumber","_readLongWithOverflow","_getLastBlock","_getIndex","_getRelevantBlocksForRead","endPosition","relevant","lowerBound","upperBound","searchPosition","comparison","nextEntry","nextUncompressedPosition","Infinity"],"mappings":"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","file":"18.d6f72bf7381751b3c8a4.worker.js","sourcesContent":["function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promisify = promisify;\n// Symbols is a better way to do this, but not all browsers have good support,\n// so instead we'll just make do with a very unlikely string.\nvar customArgumentsToken = \"__ES6-PROMISIFY--CUSTOM-ARGUMENTS__\";\n/**\n * promisify()\n * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) --\n * into an ES6-compatible Promise. Promisify provides a default callback of the\n * form (error, result) and rejects when `error` is truthy.\n *\n * @param {function} original - The function to promisify\n * @return {function} A promisified version of `original`\n */\n\nfunction promisify(original) {\n  // Ensure the argument is a function\n  if (typeof original !== \"function\") {\n    throw new TypeError(\"Argument to promisify must be a function\");\n  } // If the user has asked us to decode argument names for them, honour that\n\n\n  var argumentNames = original[customArgumentsToken]; // If the user has supplied a custom Promise implementation, use it.\n  // Otherwise fall back to whatever we can find on the global object.\n\n  var ES6Promise = promisify.Promise || Promise; // If we can find no Promise implemention, then fail now.\n\n  if (typeof ES6Promise !== \"function\") {\n    throw new Error(\"No Promise implementation found; do you need a polyfill?\");\n  }\n\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new ES6Promise(function (resolve, reject) {\n      // Append the callback bound to the context\n      args.push(function callback(err) {\n        if (err) {\n          return reject(err);\n        }\n\n        for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          values[_key2 - 1] = arguments[_key2];\n        }\n\n        if (values.length === 1 || !argumentNames) {\n          return resolve(values[0]);\n        }\n\n        var o = {};\n        values.forEach(function (value, index) {\n          var name = argumentNames[index];\n\n          if (name) {\n            o[name] = value;\n          }\n        });\n        resolve(o);\n      }); // Call the function.\n\n      original.apply(_this, args);\n    });\n  };\n} // Attach this symbol to the exported function, so users can use it\n\n\npromisify.argumentNames = customArgumentsToken;\npromisify.Promise = undefined; // Export the public API","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _require = require('es6-promisify'),\n    promisify = _require.promisify;\n\nvar _require2 = require('browser-or-node'),\n    isNode = _require2.isNode; // don't load fs native module if running in the browser\n\n\nvar fsOpen;\nvar fsRead;\nvar fsFStat;\nvar fsReadFile;\n\nif (isNode) {\n  // eslint-disable-next-line global-require\n  var fs = require('fs');\n\n  fsOpen = fs && promisify(fs.open);\n  fsRead = fs && promisify(fs.read);\n  fsFStat = fs && promisify(fs.fstat);\n  fsReadFile = fs && promisify(fs.readFile);\n}\n\nvar LocalFile = /*#__PURE__*/function () {\n  function LocalFile(source) {\n    (0, _classCallCheck2.default)(this, LocalFile);\n    this.position = 0;\n    this.filename = source;\n    this.fd = fsOpen(this.filename, 'r');\n  }\n\n  (0, _createClass2.default)(LocalFile, [{\n    key: \"read\",\n    value: function () {\n      var _read = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(buffer) {\n        var offset,\n            length,\n            position,\n            readPosition,\n            ret,\n            _args = arguments;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                offset = _args.length > 1 && _args[1] !== undefined ? _args[1] : 0;\n                length = _args.length > 2 ? _args[2] : undefined;\n                position = _args.length > 3 ? _args[3] : undefined;\n                readPosition = position;\n\n                if (readPosition === null) {\n                  readPosition = this.position;\n                  this.position += length;\n                }\n\n                _context.t0 = fsRead;\n                _context.next = 8;\n                return this.fd;\n\n              case 8:\n                _context.t1 = _context.sent;\n                _context.t2 = buffer;\n                _context.t3 = offset;\n                _context.t4 = length;\n                _context.t5 = position;\n                _context.next = 15;\n                return (0, _context.t0)(_context.t1, _context.t2, _context.t3, _context.t4, _context.t5);\n\n              case 15:\n                ret = _context.sent;\n\n                if (!((0, _typeof2.default)(ret) === 'object')) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", ret.bytesRead);\n\n              case 18:\n                return _context.abrupt(\"return\", ret);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read(_x) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"readFile\",\n    value: function () {\n      var _readFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", fsReadFile(this.filename));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readFile() {\n        return _readFile.apply(this, arguments);\n      }\n\n      return readFile;\n    }()\n  }, {\n    key: \"stat\",\n    value: function () {\n      var _stat = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._stat) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.t0 = fsFStat;\n                _context3.next = 4;\n                return this.fd;\n\n              case 4:\n                _context3.t1 = _context3.sent;\n                _context3.next = 7;\n                return (0, _context3.t0)(_context3.t1);\n\n              case 7:\n                this._stat = _context3.sent;\n\n              case 8:\n                return _context3.abrupt(\"return\", this._stat);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function stat() {\n        return _stat.apply(this, arguments);\n      }\n\n      return stat;\n    }()\n  }]);\n  return LocalFile;\n}();\n\nexports.default = LocalFile;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _localFile = _interopRequireDefault(require(\"./localFile\"));\n\nfunction _faiOffset(idx, pos) {\n  return idx.offset + idx.lineBytes * Math.floor(pos / idx.lineLength) + pos % idx.lineLength;\n}\n\nvar IndexedFasta = /*#__PURE__*/function () {\n  function IndexedFasta(_ref) {\n    var fasta = _ref.fasta,\n        fai = _ref.fai,\n        path = _ref.path,\n        faiPath = _ref.faiPath,\n        _ref$chunkSizeLimit = _ref.chunkSizeLimit,\n        chunkSizeLimit = _ref$chunkSizeLimit === void 0 ? 1000000 : _ref$chunkSizeLimit;\n    (0, _classCallCheck2.default)(this, IndexedFasta);\n\n    if (fasta) {\n      this.fasta = fasta;\n    } else if (path) {\n      this.fasta = new _localFile.default(path);\n    }\n\n    if (fai) {\n      this.fai = fai;\n    } else if (faiPath) {\n      this.fai = new _localFile.default(faiPath);\n    } else if (path) {\n      this.fai = new _localFile.default(\"\".concat(path, \".fai\"));\n    }\n\n    this.chunkSizeLimit = chunkSizeLimit;\n  }\n\n  (0, _createClass2.default)(IndexedFasta, [{\n    key: \"_getIndexes\",\n    value: function () {\n      var _getIndexes2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(opts) {\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.indexes) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 3;\n                return this._readFAI(opts);\n\n              case 3:\n                this.indexes = _context.sent;\n\n              case 4:\n                return _context.abrupt(\"return\", this.indexes);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _getIndexes(_x) {\n        return _getIndexes2.apply(this, arguments);\n      }\n\n      return _getIndexes;\n    }()\n  }, {\n    key: \"_readFAI\",\n    value: function () {\n      var _readFAI2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(opts) {\n        var text, idCounter, currSeq, data;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.fai.readFile(opts);\n\n              case 2:\n                text = _context2.sent;\n\n                if (text && text.length) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('No data read from FASTA index (FAI) file');\n\n              case 5:\n                idCounter = 0;\n                data = text.toString('utf8').split(/\\r?\\n/).filter(function (line) {\n                  return /\\S/.test(line);\n                }).map(function (line) {\n                  return line.split('\\t');\n                }).filter(function (row) {\n                  return row[0] !== '';\n                }).map(function (row) {\n                  if (!currSeq || currSeq.name !== row[0]) {\n                    currSeq = {\n                      name: row[0],\n                      id: idCounter\n                    };\n                    idCounter += 1;\n                  }\n\n                  return {\n                    id: currSeq.id,\n                    name: row[0],\n                    length: +row[1],\n                    start: 0,\n                    end: +row[1],\n                    offset: +row[2],\n                    lineLength: +row[3],\n                    lineBytes: +row[4]\n                  };\n                });\n                return _context2.abrupt(\"return\", {\n                  name: Object.fromEntries(data.map(function (entry) {\n                    return [entry.name, entry];\n                  })),\n                  id: Object.fromEntries(data.map(function (entry) {\n                    return [entry.id, entry];\n                  }))\n                });\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _readFAI(_x2) {\n        return _readFAI2.apply(this, arguments);\n      }\n\n      return _readFAI;\n    }()\n    /**\n     * @returns {array[string]} array of string sequence\n     * names that are present in the index, in which the\n     * array index indicates the sequence ID, and the value\n     * is the sequence name\n     */\n\n  }, {\n    key: \"getSequenceNames\",\n    value: function () {\n      var _getSequenceNames = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(opts) {\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = Object;\n                _context3.next = 3;\n                return this._getIndexes(opts);\n\n              case 3:\n                _context3.t1 = _context3.sent.name;\n                return _context3.abrupt(\"return\", _context3.t0.keys.call(_context3.t0, _context3.t1));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getSequenceNames(_x3) {\n        return _getSequenceNames.apply(this, arguments);\n      }\n\n      return getSequenceNames;\n    }()\n    /**\n     * @returns {array[string]} array of string sequence\n     * names that are present in the index, in which the\n     * array index indicates the sequence ID, and the value\n     * is the sequence name\n     */\n\n  }, {\n    key: \"getSequenceSizes\",\n    value: function () {\n      var _getSequenceSizes = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(opts) {\n        var returnObject, idx, vals, i;\n        return _regenerator.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                returnObject = {};\n                _context4.next = 3;\n                return this._getIndexes(opts);\n\n              case 3:\n                idx = _context4.sent;\n                vals = Object.values(idx.id);\n\n                for (i = 0; i < vals.length; i += 1) {\n                  returnObject[vals[i].name] = vals[i].length;\n                }\n\n                return _context4.abrupt(\"return\", returnObject);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getSequenceSizes(_x4) {\n        return _getSequenceSizes.apply(this, arguments);\n      }\n\n      return getSequenceSizes;\n    }()\n    /**\n     * @returns {array[string]} array of string sequence\n     * names that are present in the index, in which the\n     * array index indicates the sequence ID, and the value\n     * is the sequence name\n     */\n\n  }, {\n    key: \"getSequenceSize\",\n    value: function () {\n      var _getSequenceSize = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(seqName, opts) {\n        var idx;\n        return _regenerator.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._getIndexes(opts);\n\n              case 2:\n                idx = _context5.sent;\n                return _context5.abrupt(\"return\", (idx.name[seqName] || {}).length);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getSequenceSize(_x5, _x6) {\n        return _getSequenceSize.apply(this, arguments);\n      }\n\n      return getSequenceSize;\n    }()\n    /**\n     *\n     * @param {string} name\n     * @returns {Promise[boolean]} true if the file contains the given reference sequence name\n     */\n\n  }, {\n    key: \"hasReferenceSequence\",\n    value: function () {\n      var _hasReferenceSequence = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(name, opts) {\n        return _regenerator.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._getIndexes(opts);\n\n              case 2:\n                _context6.t0 = name;\n                return _context6.abrupt(\"return\", !!_context6.sent.name[_context6.t0]);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function hasReferenceSequence(_x7, _x8) {\n        return _hasReferenceSequence.apply(this, arguments);\n      }\n\n      return hasReferenceSequence;\n    }()\n    /**\n     *\n     * @param {number} seqId\n     * @param {number} min\n     * @param {number} max\n     */\n\n  }, {\n    key: \"getResiduesById\",\n    value: function () {\n      var _getResiduesById = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(seqId, min, max, opts) {\n        var indexEntry;\n        return _regenerator.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._getIndexes(opts);\n\n              case 2:\n                _context7.t0 = seqId;\n                indexEntry = _context7.sent.id[_context7.t0];\n\n                if (indexEntry) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", undefined);\n\n              case 6:\n                return _context7.abrupt(\"return\", this._fetchFromIndexEntry(indexEntry, min, max));\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getResiduesById(_x9, _x10, _x11, _x12) {\n        return _getResiduesById.apply(this, arguments);\n      }\n\n      return getResiduesById;\n    }()\n    /**\n     * @param {string} seqName\n     * @param {number} min\n     * @param {number} max\n     */\n\n  }, {\n    key: \"getResiduesByName\",\n    value: function () {\n      var _getResiduesByName = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(seqName, min, max, opts) {\n        var indexEntry;\n        return _regenerator.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._getIndexes(opts);\n\n              case 2:\n                _context8.t0 = seqName;\n                indexEntry = _context8.sent.name[_context8.t0];\n\n                if (indexEntry) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", undefined);\n\n              case 6:\n                return _context8.abrupt(\"return\", this._fetchFromIndexEntry(indexEntry, min, max, opts));\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getResiduesByName(_x13, _x14, _x15, _x16) {\n        return _getResiduesByName.apply(this, arguments);\n      }\n\n      return getResiduesByName;\n    }()\n  }, {\n    key: \"getSequence\",\n    value: function () {\n      var _getSequence = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n        var _args9 = arguments;\n        return _regenerator.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.getResiduesByName.apply(this, _args9));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getSequence() {\n        return _getSequence.apply(this, arguments);\n      }\n\n      return getSequence;\n    }()\n  }, {\n    key: \"_fetchFromIndexEntry\",\n    value: function () {\n      var _fetchFromIndexEntry2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10(indexEntry) {\n        var min,\n            max,\n            opts,\n            end,\n            position,\n            readlen,\n            residues,\n            _args10 = arguments;\n        return _regenerator.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                min = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : 0;\n                max = _args10.length > 2 ? _args10[2] : undefined;\n                opts = _args10.length > 3 ? _args10[3] : undefined;\n                end = max;\n\n                if (!(min < 0)) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new TypeError('regionStart cannot be less than 0');\n\n              case 6:\n                if (end === undefined || end > indexEntry.length) {\n                  end = indexEntry.length;\n                }\n\n                if (!(min >= end)) {\n                  _context10.next = 9;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", '');\n\n              case 9:\n                position = _faiOffset(indexEntry, min);\n                readlen = _faiOffset(indexEntry, end) - position;\n\n                if (!(readlen > this.chunkSizeLimit)) {\n                  _context10.next = 13;\n                  break;\n                }\n\n                throw new Error(\"data size of \".concat(readlen.toLocaleString(), \" bytes exceeded chunk size limit of \").concat(this.chunkSizeLimit.toLocaleString(), \" bytes\"));\n\n              case 13:\n                residues = Buffer.allocUnsafe(readlen);\n                _context10.next = 16;\n                return this.fasta.read(residues, 0, readlen, position, opts);\n\n              case 16:\n                return _context10.abrupt(\"return\", residues.toString('utf8').replace(/\\s+/g, ''));\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _fetchFromIndexEntry(_x17) {\n        return _fetchFromIndexEntry2.apply(this, arguments);\n      }\n\n      return _fetchFromIndexEntry;\n    }()\n  }]);\n  return IndexedFasta;\n}();\n\nexports.default = IndexedFasta;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseSmallFasta = parseSmallFasta;\nObject.defineProperty(exports, \"BgzipIndexedFasta\", {\n  enumerable: true,\n  get: function get() {\n    return _bgzipIndexedFasta.default;\n  }\n});\nObject.defineProperty(exports, \"IndexedFasta\", {\n  enumerable: true,\n  get: function get() {\n    return _indexedFasta.default;\n  }\n});\nexports.FetchableSmallFasta = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _toArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toArray\"));\n\nvar _object = _interopRequireDefault(require(\"object.fromentries\"));\n\nvar _localFile = _interopRequireDefault(require(\"./localFile\"));\n\nvar _bgzipIndexedFasta = _interopRequireDefault(require(\"./bgzipIndexedFasta\"));\n\nvar _indexedFasta = _interopRequireDefault(require(\"./indexedFasta\"));\n\nif (!Object.fromEntries) {\n  // @ts-ignore\n  _object.default.shim();\n}\n\nfunction parseSmallFasta(text) {\n  return text.split('>').filter(function (t) {\n    return /\\S/.test(t);\n  }).map(function (entryText) {\n    var _entryText$split = entryText.split('\\n'),\n        _entryText$split2 = (0, _toArray2.default)(_entryText$split),\n        defLine = _entryText$split2[0],\n        seqLines = _entryText$split2.slice(1);\n\n    var _defLine$split = defLine.split(' '),\n        _defLine$split2 = (0, _toArray2.default)(_defLine$split),\n        id = _defLine$split2[0],\n        description = _defLine$split2.slice(1);\n\n    var sequence = seqLines.join('').replace(/\\s/g, '');\n    return {\n      id: id,\n      description: description.join(' '),\n      sequence: sequence\n    };\n  });\n} // memoized\n\n\nvar FetchableSmallFasta = /*#__PURE__*/function () {\n  function FetchableSmallFasta(_ref) {\n    var fasta = _ref.fasta,\n        path = _ref.path;\n    (0, _classCallCheck2.default)(this, FetchableSmallFasta);\n\n    if (fasta) {\n      this.fasta = fasta;\n    } else if (path) {\n      this.fasta = new _localFile.default(path);\n    }\n\n    this.data = this.fasta.readFile().then(function (buffer) {\n      var text = buffer.toString('utf8');\n      return parseSmallFasta(text);\n    });\n  }\n\n  (0, _createClass2.default)(FetchableSmallFasta, [{\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(id, start, end) {\n        var data, entry, length;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.data;\n\n              case 2:\n                data = _context.sent;\n                entry = data.find(function (iter) {\n                  return iter.id === id;\n                });\n                length = end - start;\n\n                if (entry) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"no sequence with id \".concat(id, \" exists\"));\n\n              case 7:\n                return _context.abrupt(\"return\", entry.sequence.substr(start, length));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x, _x2, _x3) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }, {\n    key: \"getSequenceNames\",\n    value: function () {\n      var _getSequenceNames = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var data;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.data;\n\n              case 2:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", data.map(function (entry) {\n                  return entry.id;\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getSequenceNames() {\n        return _getSequenceNames.apply(this, arguments);\n      }\n\n      return getSequenceNames;\n    }()\n  }]);\n  return FetchableSmallFasta;\n}();\n\nexports.FetchableSmallFasta = FetchableSmallFasta;","var arrayWithHoles = require(\"./arrayWithHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableRest = require(\"./nonIterableRest.js\");\n\nfunction _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}\n\nmodule.exports = _toArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* global window self */\n\nvar isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n/* eslint-disable no-restricted-globals */\nvar isWebWorker = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope';\n/* eslint-enable no-restricted-globals */\n\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\n\n/**\n * @see https://github.com/jsdom/jsdom/releases/tag/12.0.0\n * @see https://github.com/jsdom/jsdom/issues/1537\n */\n/* eslint-disable no-undef */\nvar isJsDom = function isJsDom() {\n  return typeof window !== 'undefined' && window.name === 'nodejs' || navigator.userAgent.includes('Node.js') || navigator.userAgent.includes('jsdom');\n};\n\nexports.isBrowser = isBrowser;\nexports.isWebWorker = isWebWorker;\nexports.isNode = isNode;\nexports.isJsDom = isJsDom;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _bgzfFilehandle = require(\"@gmod/bgzf-filehandle\");\n\nvar _indexedFasta = _interopRequireDefault(require(\"./indexedFasta\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar BgzipIndexedFasta = /*#__PURE__*/function (_IndexedFasta) {\n  (0, _inherits2.default)(BgzipIndexedFasta, _IndexedFasta);\n\n  var _super = _createSuper(BgzipIndexedFasta);\n\n  function BgzipIndexedFasta(_ref) {\n    var _this;\n\n    var fasta = _ref.fasta,\n        path = _ref.path,\n        fai = _ref.fai,\n        faiPath = _ref.faiPath,\n        gzi = _ref.gzi,\n        gziPath = _ref.gziPath,\n        chunkSizeLimit = _ref.chunkSizeLimit;\n    (0, _classCallCheck2.default)(this, BgzipIndexedFasta);\n    _this = _super.call(this, {\n      fasta: fasta,\n      path: path,\n      fai: fai,\n      faiPath: faiPath,\n      chunkSizeLimit: chunkSizeLimit\n    });\n\n    if (fasta && gzi) {\n      _this.fasta = new _bgzfFilehandle.BgzfFilehandle({\n        filehandle: fasta,\n        gziFilehandle: gzi\n      });\n    } else if (path && gziPath) {\n      _this.fasta = new _bgzfFilehandle.BgzfFilehandle({\n        path: path,\n        gziPath: gziPath\n      });\n    }\n\n    return _this;\n  }\n\n  return BgzipIndexedFasta;\n}(_indexedFasta.default);\n\nexports.default = BgzipIndexedFasta;","import { IndexedFasta } from '@gmod/indexedfasta'\nimport {\n  BaseFeatureDataAdapter,\n  SequenceAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { FileLocation, NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport AbortablePromiseCache from 'abortable-promise-cache'\nimport LRU from '@jbrowse/core/util/QuickLRU'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class extends BaseFeatureDataAdapter implements SequenceAdapter {\n  protected fasta: typeof IndexedFasta\n\n  private seqCache = new AbortablePromiseCache({\n    cache: new LRU({ maxSize: 200 }),\n    fill: async (\n      args: { refName: string; start: number; end: number },\n      signal?: AbortSignal,\n    ) => {\n      const { refName, start, end } = args\n      return this.fasta.getSequence(refName, start, end, { ...args, signal })\n    },\n  })\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const fastaLocation = readConfObject(config, 'fastaLocation')\n    const faiLocation = readConfObject(config, 'faiLocation')\n    const fastaOpts = {\n      fasta: openLocation(fastaLocation as FileLocation, this.pluginManager),\n      fai: openLocation(faiLocation as FileLocation, this.pluginManager),\n    }\n\n    this.fasta = new IndexedFasta(fastaOpts)\n  }\n\n  public getRefNames(opts?: BaseOptions) {\n    return this.fasta.getSequenceNames(opts)\n  }\n\n  public async getRegions(opts?: BaseOptions) {\n    const seqSizes = await this.fasta.getSequenceSizes(opts)\n    return Object.keys(seqSizes).map(refName => ({\n      refName,\n      start: 0,\n      end: seqSizes[refName],\n    }))\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures(region: NoAssemblyRegion, opts?: BaseOptions) {\n    const { refName, start, end } = region\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.fasta.getSequenceSize(refName, opts)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const chunks = []\n      const chunkSize = 128000\n\n      const s = start - (start % chunkSize)\n      const e = end + (chunkSize - (end % chunkSize))\n      for (let chunkStart = s; chunkStart < e; chunkStart += chunkSize) {\n        const r = {\n          refName,\n          start: chunkStart,\n          end: chunkStart + chunkSize,\n        }\n        chunks.push(this.seqCache.get(JSON.stringify(r), r, opts?.signal))\n      }\n      const seq = (await Promise.all(chunks))\n        .join('')\n        .slice(start - s)\n        .slice(0, end - start)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the forseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n","import { BgzipIndexedFasta } from '@gmod/indexedfasta'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport IndexedFasta from '../IndexedFastaAdapter/IndexedFastaAdapter'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class extends IndexedFasta {\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const fastaLocation = readConfObject(config, 'fastaLocation')\n    const faiLocation = readConfObject(config, 'faiLocation')\n    const gziLocation = readConfObject(config, 'gziLocation')\n    if (!fastaLocation) {\n      throw new Error('must provide fastaLocation')\n    }\n    if (!faiLocation) {\n      throw new Error('must provide faiLocation')\n    }\n    if (!gziLocation) {\n      throw new Error('must provide gziLocation')\n    }\n    const fastaOpts = {\n      fasta: openLocation(fastaLocation as FileLocation, this.pluginManager),\n      fai: openLocation(faiLocation as FileLocation, this.pluginManager),\n      gzi: openLocation(gziLocation as FileLocation, this.pluginManager),\n    }\n\n    this.fasta = new BgzipIndexedFasta(fastaOpts)\n  }\n}\n","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","\"use strict\";var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\")); /* eslint-disable consistent-return */var _require =\nrequire('pako'),Z_SYNC_FLUSH = _require.Z_SYNC_FLUSH,Inflate = _require.Inflate;\n\n// browserify-zlib, which is the zlib shim used by default in webpacked code,\n// does not properly uncompress bgzf chunks that contain more than\n// one bgzf block, so export an unzip function that uses pako directly\n// if we are running in a browser.\nfunction unzip(_x) {return _unzip.apply(this, arguments);}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// similar to pakounzip, except it does extra counting\n// to return the positions of compressed and decompressed\n// data offsets\nfunction _unzip() {_unzip = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(inputData) {var strm, pos, i, chunks, inflator, remainingInput, _inflator, result;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.prev = 0;pos = 0;i = 0;chunks = [];case 4:remainingInput = inputData.slice(pos);inflator = new Inflate();_inflator = inflator;strm = _inflator.strm;inflator.push(remainingInput, Z_SYNC_FLUSH);if (!inflator.err) {_context.next = 11;break;}throw new Error(inflator.msg);case 11:pos += strm.next_in;chunks[i] = Buffer.from(inflator.result);i += 1;case 14:if (strm.avail_in) {_context.next = 4;break;}case 15:result = Buffer.concat(chunks);return _context.abrupt(\"return\", result);case 19:_context.prev = 19;_context.t0 = _context[\"catch\"](0);if (!_context.t0.message.match(/incorrect header check/)) {_context.next = 23;break;}throw new Error('problem decompressing block: incorrect gzip header check');case 23:case \"end\":return _context.stop();}}}, _callee, null, [[0, 19]]);}));return _unzip.apply(this, arguments);}function unzipChunk(_x2) {return _unzipChunk.apply(this, arguments);}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// similar to unzipChunk above but slices (0,minv.dataPosition) and (maxv.dataPosition,end) off\nfunction _unzipChunk() {_unzipChunk = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(inputData) {var strm, cpos, dpos, blocks, cpositions, dpositions, remainingInput, inflator, _buffer, buffer;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.prev = 0;cpos = 0;dpos = 0;blocks = [];cpositions = [];dpositions = [];case 6:remainingInput = inputData.slice(cpos);inflator = new Inflate();strm = inflator.strm; // @ts-ignore\n            inflator.push(remainingInput, Z_SYNC_FLUSH);if (!inflator.err) {_context2.next = 12;break;}throw new Error(inflator.msg);case 12: // @ts-ignore\n            _buffer = Buffer.from(inflator.result);blocks.push(_buffer);cpositions.push(cpos);dpositions.push(dpos);cpos += strm.next_in;dpos += _buffer.length;case 18:if (strm.avail_in) {_context2.next = 6;break;}case 19:buffer = Buffer.concat(blocks);return _context2.abrupt(\"return\", { buffer: buffer, cpositions: cpositions, dpositions: dpositions });case 23:_context2.prev = 23;_context2.t0 = _context2[\"catch\"](0);if (!_context2.t0.message.match(/incorrect header check/)) {_context2.next = 27;break;}throw new Error('problem decompressing block: incorrect gzip header check');case 27:case \"end\":return _context2.stop();}}}, _callee2, null, [[0, 23]]);}));return _unzipChunk.apply(this, arguments);}function unzipChunkSlice(_x3, _x4) {return _unzipChunkSlice.apply(this, arguments);}function _unzipChunkSlice() {_unzipChunkSlice = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(inputData, chunk) {var strm, cpos, dpos, decompressedBlocks, cpositions, dpositions, remainingInput, inflator, _buffer2, len, origCpos, buffer;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.prev = 0;\n            cpos = chunk.minv.blockPosition;\n            dpos = chunk.minv.dataPosition;\n            decompressedBlocks = [];\n            cpositions = [];\n            dpositions = [];case 6:\n\n            remainingInput = inputData.slice(cpos - chunk.minv.blockPosition);\n            inflator = new Inflate();\n\n            strm = inflator.strm;\n            // @ts-ignore\n            inflator.push(remainingInput, Z_SYNC_FLUSH);if (!\n            inflator.err) {_context3.next = 12;break;}throw new Error(inflator.msg);case 12:\n\n            // @ts-ignore\n            _buffer2 = Buffer.from(inflator.result);\n            decompressedBlocks.push(_buffer2);\n            len = _buffer2.length;\n\n            cpositions.push(cpos);\n            dpositions.push(dpos);\n            if (decompressedBlocks.length === 1 && chunk.minv.dataPosition) {\n              // this is the first chunk, trim it\n              decompressedBlocks[0] = decompressedBlocks[0].slice(\n              chunk.minv.dataPosition);\n\n              len = decompressedBlocks[0].length;\n            }\n            origCpos = cpos;\n            cpos += strm.next_in;\n            dpos += len;if (!(\n\n            origCpos >= chunk.maxv.blockPosition)) {_context3.next = 26;break;}\n            // this is the last chunk, trim it and stop decompressing\n            // note if it is the same block is minv it subtracts that already\n            // trimmed part of the slice length\n\n            decompressedBlocks[decompressedBlocks.length - 1] = decompressedBlocks[\n            decompressedBlocks.length - 1].\n            slice(\n            0,\n            chunk.maxv.blockPosition === chunk.minv.blockPosition ?\n            chunk.maxv.dataPosition - chunk.minv.dataPosition + 1 :\n            chunk.maxv.dataPosition + 1);\n\n\n            cpositions.push(cpos);\n            dpositions.push(dpos);return _context3.abrupt(\"break\", 27);case 26:if (\n\n\n            strm.avail_in) {_context3.next = 6;break;}case 27:\n\n            buffer = Buffer.concat(decompressedBlocks);return _context3.abrupt(\"return\",\n            { buffer: buffer, cpositions: cpositions, dpositions: dpositions });case 31:_context3.prev = 31;_context3.t0 = _context3[\"catch\"](0);if (!\n\n            _context3.t0.message.match(/incorrect header check/)) {_context3.next = 35;break;}throw (\n              new Error(\n              'problem decompressing block: incorrect gzip header check'));case 35:throw _context3.t0;case 36:case \"end\":return _context3.stop();}}}, _callee3, null, [[0, 31]]);}));return _unzipChunkSlice.apply(this, arguments);}\n\n\n\n\n\n\nmodule.exports = {\n  unzip: unzip,\n  unzipChunk: unzipChunk,\n  unzipChunkSlice: unzipChunkSlice,\n  pakoUnzip: unzip,\n  nodeUnzip: function nodeUnzip() {\n    throw new Error('nodeUnzip not implemented.');\n  } };","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","\"use strict\";var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var fs = require('fs-extra');\n\n// LocalFile is pretty much just an implementation of the node 10+ fs.promises filehandle,\n// we can switch to that when the API is stable\nvar LocalFile = /*#__PURE__*/function () {\n  function LocalFile(path) {(0, _classCallCheck2.default)(this, LocalFile);\n    this.fdPromise = fs.open(path, 'r');\n    this.path = path;\n  }(0, _createClass2.default)(LocalFile, [{ key: \"read\", value: function () {var _read = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(\n\n      buf, offset, length, position) {var fd, ret;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (\n                  this.fdPromise);case 2:fd = _context.sent;_context.next = 5;return (\n                  fs.read(fd, buf, offset, length, position));case 5:ret = _context.sent;return _context.abrupt(\"return\",\n                ret);case 7:case \"end\":return _context.stop();}}}, _callee, this);}));function read(_x, _x2, _x3, _x4) {return _read.apply(this, arguments);}return read;}() }, { key: \"stat\", value: function () {var _stat = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var fd;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (\n\n\n\n                  this.fdPromise);case 2:fd = _context2.sent;return _context2.abrupt(\"return\",\n                fs.fstat(fd));case 4:case \"end\":return _context2.stop();}}}, _callee2, this);}));function stat() {return _stat.apply(this, arguments);}return stat;}() }]);return LocalFile;}();\n\n\n\nmodule.exports = LocalFile;","\"use strict\";var BgzfFilehandle = require('./bgzFilehandle');var _require =\nrequire('./unzip'),unzip = _require.unzip,unzipChunk = _require.unzipChunk,unzipChunkSlice = _require.unzipChunkSlice;\n\nmodule.exports = { BgzfFilehandle: BgzfFilehandle, unzip: unzip, unzipChunk: unzipChunk, unzipChunkSlice: unzipChunkSlice };","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var _typeof = require(\"@babel/runtime/helpers/typeof\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","\"use strict\";var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _require = require('./unzip'),unzip = _require.unzip;\nvar LocalFile = require('./localFile');\nvar GziIndex = require('./gziIndex');var\n\nBgzFilehandle = /*#__PURE__*/function () {\n  function BgzFilehandle(_ref) {var filehandle = _ref.filehandle,path = _ref.path,gziFilehandle = _ref.gziFilehandle,gziPath = _ref.gziPath;(0, _classCallCheck2.default)(this, BgzFilehandle);\n    if (filehandle) this.filehandle = filehandle;else\n    if (path) this.filehandle = new LocalFile(path);else\n    throw new TypeError('either filehandle or path must be defined');\n\n    if (!gziFilehandle && !gziPath && !path)\n    throw new TypeError('either gziFilehandle or gziPath must be defined');\n\n    this.gzi = new GziIndex({\n      filehandle: gziFilehandle,\n      path: !gziFilehandle && !gziPath && path ? gziPath : \"\".concat(path, \".gzi\") });\n\n  }(0, _createClass2.default)(BgzFilehandle, [{ key: \"stat\", value: function () {var _stat = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var compressedStat;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (\n\n\n                  this.filehandle.stat());case 2:compressedStat = _context.sent;_context.t0 =\n                Object;_context.t1 = compressedStat;_context.next = 7;return (\n                  this.getUncompressedFileSize());case 7:_context.t2 = _context.sent;_context.t3 =\n                undefined;_context.t4 =\n                undefined;_context.t5 = { size: _context.t2, blocks: _context.t3, blksize: _context.t4 };return _context.abrupt(\"return\", _context.t0.assign.call(_context.t0, _context.t1, _context.t5));case 12:case \"end\":return _context.stop();}}}, _callee, this);}));function stat() {return _stat.apply(this, arguments);}return stat;}() }, { key: \"getUncompressedFileSize\", value: function () {var _getUncompressedFileSize = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var _ref2, _ref3, uncompressedPosition, _ref4, size, buf, _ref5, bytesRead, lastBlockUncompressedSize;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (\n\n\n\n\n\n\n                  this.gzi.getLastBlock());case 2:_ref2 = _context2.sent;_ref3 = (0, _slicedToArray2.default)(_ref2, 2);uncompressedPosition = _ref3[1];_context2.next = 7;return (\n\n                  this.filehandle.stat());case 7:_ref4 = _context2.sent;size = _ref4.size;\n\n                buf = Buffer.allocUnsafe(4);\n                // note: there should be a 28-byte EOF marker (an empty block) at\n                // the end of the file, so we skip backward past that\n                _context2.next = 12;return this.filehandle.read(buf, 0, 4, size - 28 - 4);case 12:_ref5 = _context2.sent;bytesRead = _ref5.bytesRead;if (!(\n                bytesRead !== 4)) {_context2.next = 16;break;}throw new Error('read error');case 16:\n                lastBlockUncompressedSize = buf.readUInt32LE(0);return _context2.abrupt(\"return\",\n                uncompressedPosition + lastBlockUncompressedSize);case 18:case \"end\":return _context2.stop();}}}, _callee2, this);}));function getUncompressedFileSize() {return _getUncompressedFileSize.apply(this, arguments);}return getUncompressedFileSize;}() }, { key: \"_readAndUncompressBlock\", value: function () {var _readAndUncompressBlock2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(\n\n\n\n      blockBuffer, _ref6, _ref7) {var _ref8, compressedPosition, _ref9, nextCompressedPosition, next, blockCompressedLength, unzippedBuffer;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_ref8 = (0, _slicedToArray2.default)(_ref6, 1),\n                compressedPosition = _ref8[0];_ref9 = (0, _slicedToArray2.default)(_ref7, 1),\n                nextCompressedPosition = _ref9[0];\n\n                next = nextCompressedPosition;if (\n                next) {_context3.next = 7;break;}_context3.next = 6;return (\n                  this.filehandle.stat());case 6:next = _context3.sent.size;case 7:\n\n\n                // read the compressed data into the block buffer\n                blockCompressedLength = next - compressedPosition;_context3.next = 10;return (\n\n                  this.filehandle.read(\n                  blockBuffer,\n                  0,\n                  blockCompressedLength,\n                  compressedPosition));case 10:_context3.next = 12;return (\n\n\n\n                  unzip(\n                  blockBuffer.slice(0, blockCompressedLength)));case 12:unzippedBuffer = _context3.sent;return _context3.abrupt(\"return\",\n\n\n                unzippedBuffer);case 14:case \"end\":return _context3.stop();}}}, _callee3, this);}));function _readAndUncompressBlock(_x, _x2, _x3) {return _readAndUncompressBlock2.apply(this, arguments);}return _readAndUncompressBlock;}() }, { key: \"read\", value: function () {var _read = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(\n\n\n      buf, offset, length, position) {var blockPositions, blockBuffer, destinationOffset, bytesRead, blockNum, uncompressedBuffer, _blockPositions$block, uncompressedPosition, sourceOffset, sourceEnd;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_context4.next = 2;return (\n\n                  this.gzi.getRelevantBlocksForRead(\n                  length,\n                  position));case 2:blockPositions = _context4.sent;\n\n                blockBuffer = Buffer.allocUnsafe(32768 * 2);\n                // uncompress the blocks and read from them one at a time to keep memory usage down\n                destinationOffset = offset;\n                bytesRead = 0;\n\n                blockNum = 0;case 7:if (!(\n                blockNum < blockPositions.length - 1)) {_context4.next = 18;break;}_context4.next = 10;return (\n\n\n\n                  this._readAndUncompressBlock(\n                  blockBuffer,\n                  blockPositions[blockNum],\n                  blockPositions[blockNum + 1]));case 10:uncompressedBuffer = _context4.sent;_blockPositions$block = (0, _slicedToArray2.default)(\n\n                blockPositions[blockNum], 2), uncompressedPosition = _blockPositions$block[1];\n                sourceOffset =\n                uncompressedPosition >= position ? 0 : position - uncompressedPosition;\n                sourceEnd =\n                Math.min(\n                position + length,\n                uncompressedPosition + uncompressedBuffer.length) -\n                uncompressedPosition;\n                if (sourceOffset >= 0 && sourceOffset < uncompressedBuffer.length) {\n                  uncompressedBuffer.copy(buf, destinationOffset, sourceOffset, sourceEnd);\n                  destinationOffset += sourceEnd - sourceOffset;\n                  bytesRead += sourceEnd - sourceOffset;\n                }case 15:blockNum += 1;_context4.next = 7;break;case 18:return _context4.abrupt(\"return\",\n\n\n                { bytesRead: bytesRead, buffer: buf });case 19:case \"end\":return _context4.stop();}}}, _callee4, this);}));function read(_x4, _x5, _x6, _x7) {return _read.apply(this, arguments);}return read;}() }]);return BgzFilehandle;}();\n\n\n\nmodule.exports = BgzFilehandle;","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","\"use strict\";var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var Long = require('long');\nvar LocalFile = require('./localFile');\n\n// const COMPRESSED_POSITION = 0\nvar UNCOMPRESSED_POSITION = 1;var\n\nGziIndex = /*#__PURE__*/function () {\n  function GziIndex(_ref) {var filehandle = _ref.filehandle,path = _ref.path;(0, _classCallCheck2.default)(this, GziIndex);\n    if (filehandle) this.filehandle = filehandle;else\n    if (path) this.filehandle = new LocalFile(path);else\n    throw new TypeError('either filehandle or path must be defined');\n  }(0, _createClass2.default)(GziIndex, [{ key: \"_readLongWithOverflow\", value: function _readLongWithOverflow(\n\n    buf) {var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;var unsigned = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var long = Long.fromBytesLE(buf.slice(offset, offset + 8), unsigned);\n      if (\n      long.greaterThan(Number.MAX_SAFE_INTEGER) ||\n      long.lessThan(Number.MIN_SAFE_INTEGER))\n\n      throw new TypeError('integer overflow');\n\n      return long.toNumber();\n    } }, { key: \"_getIndex\", value: function _getIndex()\n\n    {\n      if (!this.index) this.index = this._readIndex();\n      return this.index;\n    } }, { key: \"_readIndex\", value: function () {var _readIndex2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {var buf, numEntries, entries, bufSize, entryNumber, compressedPosition, uncompressedPosition;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n\n\n                buf = Buffer.allocUnsafe(8);_context.next = 3;return (\n                  this.filehandle.read(buf, 0, 8, 0));case 3:\n                numEntries = this._readLongWithOverflow(buf, 0, true);if (\n                numEntries) {_context.next = 6;break;}return _context.abrupt(\"return\", [[0, 0]]);case 6:\n\n                entries = new Array(numEntries + 1);\n                entries[0] = [0, 0];\n\n                // TODO rewrite this to make an index-index that stays in memory\n                bufSize = 8 * 2 * numEntries;if (!(\n                bufSize > Number.MAX_SAFE_INTEGER)) {_context.next = 11;break;}throw (\n                  new TypeError('integer overflow'));case 11:\n                buf = Buffer.allocUnsafe(bufSize);_context.next = 14;return (\n                  this.filehandle.read(buf, 0, bufSize, 8));case 14:\n                for (entryNumber = 0; entryNumber < numEntries; entryNumber += 1) {\n                  compressedPosition = this._readLongWithOverflow(\n                  buf,\n                  entryNumber * 16);\n\n                  uncompressedPosition = this._readLongWithOverflow(\n                  buf,\n                  entryNumber * 16 + 8);\n\n                  entries[entryNumber + 1] = [compressedPosition, uncompressedPosition];\n                }return _context.abrupt(\"return\",\n\n                entries);case 16:case \"end\":return _context.stop();}}}, _callee, this);}));function _readIndex() {return _readIndex2.apply(this, arguments);}return _readIndex;}()\n\n\n    /**\n                                                                                                                                                                                    * @returns {object} the entry for the last block in the index\n                                                                                                                                                                                    */ }, { key: \"getLastBlock\", value: function () {var _getLastBlock = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {var entries;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (\n\n                  this._getIndex());case 2:entries = _context2.sent;if (\n                entries.length) {_context2.next = 5;break;}return _context2.abrupt(\"return\", undefined);case 5:return _context2.abrupt(\"return\",\n                entries[entries.length - 1]);case 6:case \"end\":return _context2.stop();}}}, _callee2, this);}));function getLastBlock() {return _getLastBlock.apply(this, arguments);}return getLastBlock;}()\n\n\n    /**\n                                                                                                                                                                                                               * get an array of block records that must be read to execute\n                                                                                                                                                                                                               * the given virtual read operation\n                                                                                                                                                                                                               *\n                                                                                                                                                                                                               * @param {number} position uncompressed read position\n                                                                                                                                                                                                               * @param {number} length uncompressed read length\n                                                                                                                                                                                                               * @returns {Promise} for an array of block records, the\n                                                                                                                                                                                                               * last of which should *not* be included in the read\n                                                                                                                                                                                                               */ }, { key: \"getRelevantBlocksForRead\", value: function () {var _getRelevantBlocksForRead = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(\n      length, position) {var endPosition, entries, relevant, compare, lowerBound, upperBound, searchPosition, comparison, i;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:\n                endPosition = position + length;if (!(\n                length === 0)) {_context3.next = 3;break;}return _context3.abrupt(\"return\", []);case 3:_context3.next = 5;return (\n                  this._getIndex());case 5:entries = _context3.sent;\n                relevant = [];\n\n                // binary search to find the block that the\n                // read starts in and extend forward from that\n                compare = function compare(entry, nextEntry) {\n                  var uncompressedPosition = entry[UNCOMPRESSED_POSITION];\n                  var nextUncompressedPosition = nextEntry ?\n                  nextEntry[UNCOMPRESSED_POSITION] :\n                  Infinity;\n                  // block overlaps read start\n                  if (\n                  uncompressedPosition <= position &&\n                  nextUncompressedPosition > position)\n                  {\n                    return 0;\n                    // block is before read start\n                  }\n                  if (uncompressedPosition < position) {\n                    return -1;\n                  }\n                  // block is after read start\n                  return 1;\n                };\n\n                lowerBound = 0;\n                upperBound = entries.length - 1;\n                searchPosition = Math.floor(entries.length / 2);\n\n                comparison = compare(\n                entries[searchPosition],\n                entries[searchPosition + 1]);\n\n                while (comparison !== 0) {\n                  if (comparison > 0) {\n                    upperBound = searchPosition - 1;\n                  } else if (comparison < 0) {\n                    lowerBound = searchPosition + 1;\n                  }\n                  searchPosition = Math.ceil((upperBound - lowerBound) / 2) + lowerBound;\n                  comparison = compare(entries[searchPosition], entries[searchPosition + 1]);\n                }\n\n                // here's where we read forward\n                relevant.push(entries[searchPosition]);\n                i = searchPosition + 1;case 15:if (!(\n                i < entries.length)) {_context3.next = 22;break;}\n                relevant.push(entries[i]);if (!(\n                entries[i][UNCOMPRESSED_POSITION] >= endPosition)) {_context3.next = 19;break;}return _context3.abrupt(\"break\", 22);case 19:i += 1;_context3.next = 15;break;case 22:\n\n                if (relevant[relevant.length - 1][UNCOMPRESSED_POSITION] < endPosition) {\n                  relevant.push([]);\n                }return _context3.abrupt(\"return\",\n                relevant);case 24:case \"end\":return _context3.stop();}}}, _callee3, this);}));function getRelevantBlocksForRead(_x, _x2) {return _getRelevantBlocksForRead.apply(this, arguments);}return getRelevantBlocksForRead;}()\n\n\n    // /**\n    //  * get a virtual block record giving the position and length of a BGZF region that\n    //  * must be read to execute the given virtual read operation\n    //  *\n    //  * @param {number} position uncompressed file position we would like to start reading at\n    //  * @param {number} length number of uncompressed bytes we would like to read\n    //  * @returns {object} as `{compressedPosition, uncompressedPosition, compressedSize}`. If\n    //  * compressedSize is undefined, the read should end at the end of the file.\n    //  */\n    // async calculateMultiBlockRead(length, position) {\n    //   const entries = await this._getIndex()\n    //   const endPosition = position + length\n    //   let readStart\n    //   let readLength\n    //   let readUncompressedStart\n    //   for (let i = 0; i < entries.length; i += 1) {\n    //     const entry = entries[i]\n    //     if (readStart === undefined && entry.uncompressedPosition <= position) {\n    //       readStart = entry.compressedPosition\n    //       readUncompressedStart = entry.uncompressedPosition\n    //     }\n    //     if (\n    //       readLength === undefined &&\n    //       entry.uncompressedPosition >= endPosition\n    //     ) {\n    //       readLength = entry.compressedPosition - readStart\n    //     }\n    //   }\n\n    //   return {\n    //     compressedPosition: readStart,\n    //     uncompressedPosition: readUncompressedStart,\n    //     compressedSize: readLength,\n    //   }\n    // }\n  }]);return GziIndex;}();\n\nmodule.exports = GziIndex;"],"sourceRoot":""}