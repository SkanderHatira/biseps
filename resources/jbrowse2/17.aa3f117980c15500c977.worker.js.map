{"version":3,"sources":["../../src/util.ts","../../../node_modules/@flatten-js/interval-tree/dist/main.esm.js","../../../node_modules/stream-browserify/index.js","../../../node_modules/readable-stream/writable-browser.js","../../../node_modules/readable-stream/duplex-browser.js","../../../node_modules/readable-stream/transform.js","../../../node_modules/readable-stream/passthrough.js","../../src/index.ts","../../src/api.ts","../../src/parse.ts","../../../plugins/gff3/src/Gff3Adapter/Gff3Adapter.ts"],"names":["unescape","stringVal","replace","_match","seq","String","fromCharCode","parseInt","_escape","regex","s","ch","hex","charCodeAt","toString","toUpperCase","padStart","escape","rawVal","escapeColumn","parseAttributes","attrString","length","attrs","split","forEach","a","nv","trim","arec","push","map","parseFeature","line","f","seq_id","source","type","start","end","score","parseFloat","strand","phase","attributes","parseDirective","match","exec","name","contents","parsed","directive","value","c","buildName","formatAttributes","attrOrder","Object","entries","valstring","tag","val","hasOwnProperty","Array","isArray","join","_formatSingleFeature","seenFeature","undefined","fields","formattedString","_formatFeature","feature","featureLine","strings","child_features","derived_features","formatFeature","featureOrFeatures","formatDirective","str","formatComment","comment","formatSequence","id","description","sequence","formatItem","itemOrItems","formatSingleItem","item","Interval","low","high","this","clone","other_interval","not_intersect","Math","min","max","interval1","interval2","merge","val1","val2","Node","key","left","right","parent","color","Number","isNaN","other_node","less_than","value_less_than","equal_to","value_equal","intersect","comparable_max","constructor","search_node","comparable_less_than","IntervalTree","root","nil_node","count","tree_walk","res","node","output","insert_node","tree_insert","recalc_max","tree_search","delete_node","tree_delete","interval","outputMapperFn","resp_nodes","tree_search_interval","tree_find_any_interval","visitor","callback","tree","insert","node_current","update_max","current_node","parent_node","insert_fixup","uncle_node","rotate_left","rotate_right","cut_node","fix_node","tree_successor","copy_data","delete_fixup","brother_node","not_intersect_left_subtree","not_intersect_right_subtree","found","node_min","node_max","node_successor","local_minimum","x","y","action","height","heightLeft","testBlackHeightProperty","Error","module","exports","Stream","EE","require","EventEmitter","call","inherits","Readable","Writable","Duplex","Transform","PassThrough","prototype","pipe","dest","options","ondata","chunk","writable","write","pause","ondrain","readable","resume","on","_isStdio","onend","onclose","didOnEnd","destroy","onerror","er","cleanup","listenerCount","removeListener","emit","parseStream","parseStringSync","formatSync","formatStream","formatFile","util","_callback","process","nextTick","_processParseOptions","out","encoding","parseFeatures","parseDirectives","parseSequences","parseComments","bufferSize","parseAll","GFFTransform","inputOptions","objectMode","decoder","Decoder","bind","parser","Parser","featureCallback","directiveCallback","commentCallback","sequenceCallback","errorCallback","err","data","addLine","buffer","pieces","textBuffer","pop","piece","_addLine","_encoding","_nextText","finish","items","Infinity","other","sequences","i","FormattingTransform","assign","minLinesBetweenSyncMarks","minSyncLines","insertVersionDirective","haveWeEmittedData","thisChunk","fastaMode","linesSinceLastSyncMark","stream","writeStream","newOptions","Promise","resolve","reject","containerAttributes","FASTAParser","seqCallback","currentSequence","defMatch","_flush","test","args","nullFunc","endCallback","fastaParser","eof","lineNumber","_bufferLine","hashsigns","_emitAllUnderConstructionFeatures","GFF3","_emitItem","errLine","additionalItemCount","_unbufferItem","ID","_underConstructionById","_completedReferences","d","_underConstructionTopLevel","shift","from","values","_underConstructionOrphans","JSON","stringify","rawFeatureLine","ids","_a","parents","_b","Parent","derives","_c","Derives_from","existing","_parseError","_enforceBufferSizeLimit","_resolveReferencesTo","_resolveReferencesFrom","references","loc","message","postSet","obj","slot1","slot2","subObj","returnVal","toId","otherFeature","pname","filter","location","ref","isGzip","buf","gffFeatures","openLocation","readConfObject","config","pluginManager","readFile","unzip","TextDecoder","fatal","decode","lines","headerLines","startsWith","header","feats","gff","intervalTree","flat","SimpleFeature","featureData","reduce","acc","get","loadDataP","catch","e","loadData","keys","query","opts","ObservableCreate","observer","refName","search","next","complete","error","signal","defaultFields","dataAttributes","b","toLowerCase","includes","attr","subfeatures","childLocs","childLoc","BaseFeatureDataAdapter"],"mappings":"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","file":"17.aa3f117980c15500c977.worker.js","sourcesContent":[null,"/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n/**\r\n * Interval is a pair of numbers or a pair of any comparable objects on which may be defined predicates\r\n * *equal*, *less* and method *max(p1, p1)* that returns maximum in a pair.\r\n * When interval is an object rather than pair of numbers, this object should have properties *low*, *high*, *max*\r\n * and implement methods *less_than(), equal_to(), intersect(), not_intersect(), clone(), output()*.\r\n * Two static methods *comparable_max(), comparable_less_than()* define how to compare values in pair. <br/>\r\n * This interface is described in typescript definition file *index.d.ts*\r\n *\r\n * Axis aligned rectangle is an example of such interval.\r\n * We may look at rectangle as an interval between its low left and top right corners.\r\n * See **Box** class in [flatten-js](https://github.com/alexbol99/flatten-js) library as the example\r\n * of Interval interface implementation\r\n * @type {Interval}\r\n */\r\nconst Interval = class Interval {\r\n    /**\r\n     * Accept two comparable values and creates new instance of interval\r\n     * Predicate Interval.comparable_less(low, high) supposed to return true on these values\r\n     * @param low\r\n     * @param high\r\n     */\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    /**\r\n     * Clone interval\r\n     * @returns {Interval}\r\n     */\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    /**\r\n     * Propery max returns clone of this interval\r\n     * @returns {Interval}\r\n     */\r\n    get max() {\r\n        return this.clone();   // this.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval less than other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval equals to other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval intersects other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval does not intersect other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    /**\r\n     * Returns new interval merged with other interval\r\n     * @param {Interval} interval - Other interval to merge with\r\n     * @returns {Interval}\r\n     */\r\n    merge(other_interval) {\r\n        return new Interval(\r\n            this.low === undefined ? other_interval.low : Math.min(this.low, other_interval.low),\r\n            this.high === undefined ? other_interval.high : Math.max(this.high, other_interval.high)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns how key should return\r\n     */\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    /**\r\n     * Function returns maximum between two comparable values\r\n     * @param interval1\r\n     * @param interval2\r\n     * @returns {Interval}\r\n     */\r\n    static comparable_max(interval1, interval2) {\r\n        return interval1.merge(interval2);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if first value less than second value\r\n     * @param val1\r\n     * @param val2\r\n     * @returns {boolean}\r\n     */\r\n    static comparable_less_than(val1, val2 ) {\r\n        return val1 < val2;\r\n    }\r\n};\n\n/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n// module.exports = {\r\n//     RB_TREE_COLOR_RED: 0,\r\n//     RB_TREE_COLOR_BLACK: 1\r\n// };\r\n\r\nconst RB_TREE_COLOR_RED = 0;\r\nconst RB_TREE_COLOR_BLACK = 1;\n\n/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\nclass Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.less_than(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            let value_less_than = this.item.value && other_node.item.value && this.item.value.less_than ? this.item.value.less_than(other_node.item.value) :\r\n                this.item.value < other_node.item.value;\r\n            return this.item.key.less_than(other_node.item.key) ||\r\n                this.item.key.equal_to((other_node.item.key)) && value_less_than;\r\n        }\r\n\r\n        // if (this.item.value && other_node.item.value) {\r\n        //     let item_less_than = this.item.value.less_than ? this.item.value.less_than(other_node.item.value) :\r\n        //         this.item.value < other_node.item.value;\r\n        //     return this.item.key.less_than(other_node.item.key) ||\r\n        //         this.item.key.equal_to((other_node.item.key)) && item_less_than;\r\n        // }\r\n        // else {\r\n        //     return this.item.key.less_than(other_node.item.key);\r\n        // }\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.equal_to(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            let value_equal = this.item.value && other_node.item.value && this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n            return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n        }\r\n\r\n        // let value_equal = true;\r\n        // if (this.item.value && other_node.item.value) {\r\n        //     value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n        //         this.item.value == other_node.item.value;\r\n        // }\r\n        // return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key;\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let high = this.left.max.high !== undefined ? this.left.max.high : this.left.max;\r\n        return comparable_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let low = this.right.max.low !== undefined ? this.right.max.low : this.right.item.key.low;\r\n        return comparable_less_than(search_node.item.key.high, low);\r\n    }\r\n}\n\n/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n\r\n// const nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree stores items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply pair [low,high] of numeric values <br />\r\n * @type {IntervalTree}\r\n */\r\nclass IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n        this.nil_node = new Node();\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns array of sorted keys in the ascending order\r\n     * @returns {Array}\r\n     */\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(\r\n            node.item.key.output ? node.item.key.output() : node.item.key\r\n        ));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Return array of values in the ascending keys order\r\n     * @returns {Array}\r\n     */\r\n    get values() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns array of items (<key,value> pairs) in the ascended keys order\r\n     * @returns {Array}\r\n     */\r\n    get items() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push({\r\n            key: node.item.key.output ? node.item.key.output() : node.item.key,\r\n            value: node.item.value\r\n        }));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns true if tree is empty\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return (this.root == null || this.root == this.nil_node);\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param {Interval} key - interval object or array of two numbers [low, high]\r\n     * @param {any} value - value representing any object (optional)\r\n     * @returns {Node} returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, this.nil_node, this.nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object to be checked\r\n     * @returns {boolean} true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object\r\n     * @returns {boolean} true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param {Interval} interval - search interval, or tuple [low, high]\r\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\r\n     * @returns {Array}\r\n     */\r\n    search(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        return resp_nodes.map(node => outputMapperFn(node.item.value, node.item.key))\r\n    }\r\n\r\n    /**\r\n     * Returns true if intersection between given and any interval stored in the tree found\r\n     * @param {Interval} interval - search interval or tuple [low, high]\r\n     * @returns {boolean}\r\n     */\r\n    intersect_any(interval) {\r\n        let search_node = new Node(interval);\r\n        let found = this.tree_find_any_interval(this.root, search_node);\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    }\r\n\r\n    /** Value Mapper. Walk through every node and map node value to another value\r\n    * @param callback(value,key) - function to be called for each tree item\r\n    */\r\n    map(callback) {\r\n        const tree = new IntervalTree();\r\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\r\n        return tree;\r\n    }\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == this.nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != this.nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == this.nil_node || delete_node.right == this.nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != this.nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        /*if (fix_node != this.nil_node) {*/\r\n            fix_node.parent = cut_node.parent;\r\n        /*}*/\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (/*fix_node != this.nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == this.nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    tree_find_any_interval(node, search_node) {\r\n        let found = false;\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.left, search_node);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (!found) {\r\n                found = node.intersect(search_node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (!found && node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.right, search_node);\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != this.nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != this.nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != this.nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != this.nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != this.nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != this.nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.toArray());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != this.nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != this.nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n}\n\nexport default IntervalTree;\nexport { Node, Interval };\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","module.exports = require('./lib/_stream_writable.js');\n","module.exports = require('./lib/_stream_duplex.js');\n","module.exports = require('./readable').Transform\n","module.exports = require('./readable').PassThrough\n",null,null,null,"import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { unzip } from '@gmod/bgzf-filehandle'\n\nimport gff, { GFF3FeatureLineWithRefs } from '@gmod/gff'\n\nfunction isGzip(buf: Buffer) {\n  return buf[0] === 31 && buf[1] === 139 && buf[2] === 8\n}\n\nexport default class extends BaseFeatureDataAdapter {\n  protected gffFeatures?: Promise<{\n    header: string\n    intervalTree: Record<string, IntervalTree>\n  }>\n\n  private async loadDataP() {\n    const buffer = await openLocation(\n      readConfObject(this.config, 'gffLocation'),\n      this.pluginManager,\n    ).readFile()\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    // 512MB  max chrome string length is 512MB\n    if (buf.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buf)\n    const lines = data.split('\\n')\n    const headerLines = []\n    for (let i = 0; i < lines.length && lines[i].startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n\n    const feats = gff.parseStringSync(data, {\n      parseFeatures: true,\n      parseComments: false,\n      parseDirectives: false,\n      parseSequences: false,\n    })\n\n    const intervalTree = feats\n      .flat()\n      .map(\n        (f, i) =>\n          new SimpleFeature({\n            data: this.featureData(f),\n            id: `${this.id}-offset-${i}`,\n          }),\n      )\n      .reduce((acc, obj) => {\n        const key = obj.get('refName')\n        if (!acc[key]) {\n          acc[key] = new IntervalTree()\n        }\n        acc[key].insert([obj.get('start'), obj.get('end')], obj)\n        return acc\n      }, {} as Record<string, IntervalTree>)\n\n    return { header, intervalTree }\n  }\n\n  private async loadData() {\n    if (!this.gffFeatures) {\n      this.gffFeatures = this.loadDataP().catch(e => {\n        this.gffFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.gffFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { intervalTree } = await this.loadData()\n    return Object.keys(intervalTree)\n  }\n\n  public async getHeader() {\n    const { header } = await this.loadData()\n    return header\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { start, end, refName } = query\n        const { intervalTree } = await this.loadData()\n        intervalTree[refName]\n          ?.search([start, end])\n          .forEach(f => observer.next(f))\n        observer.complete()\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n\n  private featureData(data: GFF3FeatureLineWithRefs) {\n    const f: Record<string, unknown> = { ...data }\n    ;(f.start as number) -= 1 // convert to interbase\n    if (data.strand === '+') {\n      f.strand = 1\n    } else if (data.strand === '-') {\n      f.strand = -1\n    } else if (data.strand === '.') {\n      f.strand = 0\n    } else {\n      f.strand = undefined\n    }\n    f.phase = Number(data.phase)\n    f.refName = data.seq_id\n    if (data.score === null) {\n      delete f.score\n    }\n    if (data.phase === null) {\n      delete f.score\n    }\n    const defaultFields = [\n      'start',\n      'end',\n      'seq_id',\n      'score',\n      'type',\n      'source',\n      'phase',\n      'strand',\n    ]\n    const dataAttributes = data.attributes || {}\n    Object.keys(dataAttributes).forEach(a => {\n      let b = a.toLowerCase()\n      if (defaultFields.includes(b)) {\n        // add \"suffix\" to tag name if it already exists\n        // reproduces behavior of NCList\n        b += '2'\n      }\n      if (dataAttributes[a] !== null) {\n        let attr: string | string[] | undefined = dataAttributes[a]\n        if (Array.isArray(attr) && attr.length === 1) {\n          ;[attr] = attr\n        }\n        f[b] = attr\n      }\n    })\n    f.refName = f.seq_id\n\n    // the SimpleFeature constructor takes care of recursively inflating subfeatures\n    if (data.child_features && data.child_features.length) {\n      f.subfeatures = data.child_features\n        .map(childLocs => childLocs.map(childLoc => this.featureData(childLoc)))\n        .flat()\n    }\n\n    delete f.child_features\n    delete f.data\n    delete f.derived_features\n    delete f.attributes\n    delete f.seq_id\n    return f\n  }\n\n  public freeResources(/* { region } */) {}\n}\n"],"sourceRoot":""}