{"version":3,"sources":["../../../plugins/linear-comparative-view/src/LinearComparativeView/components/Header.tsx","../../../plugins/linear-comparative-view/src/LinearComparativeView/components/LinearComparativeView.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/LinearSyntenyView.tsx"],"names":["useStyles","makeStyles","headerBar","gridArea","display","spacer","flexGrow","bp","alignItems","marginLeft","searchContainer","searchBox","LinkViews","observer","model","IconButton","onClick","toggleLinkViews","title","linkViews","color","SquareView","squareView","Header","ExtraButtons","classes","anyShowHeaders","views","some","view","hideHeader","className","map","key","id","showHelp","Typography","variant","Math","round","coarseTotalBp","toLocaleString","container","overlay","zIndex","content","position","grid","relative","Overlays","tracks","track","displays","RenderingComponent","trackId","getConf","style","height","middleComparativeHeight","overflow","MiddleComparativeView","ReactComponent","getEnv","pluginManager","getViewType","type","onDrag","n","setMiddleComparativeHeight","background","OverlayComparativeView","LinearComparativeView","props","d","theme","importFormContainer","padding","spacing","formPaper","margin","marginBottom","getName","trackData","uri","localPath","name","undefined","ImportForm","session","getSession","assemblyNames","assemblyManager","useState","selected","setSelected","setTrackData","bed2Location","setBed2Location","bed1Location","setBed1Location","numRows","error","setError","value","setValue","fileName","radioOption","path","extname","endsWith","slice","length","stripGz","assemblyError","a","get","filter","f","join","getAdapter","pafLocation","outLocation","deltaLocation","chainLocation","mcscanAnchorsLocation","mcscanSimpleAnchorsLocation","Error","isSessionWithAddTracks","Promise","all","selection","waitForAssembly","assembly","bpPerPx","offsetPx","displayedRegions","regions","setViews","forEach","setWidth","width","transaction","basename","Date","now","addTrackConf","adapter","toggleTrack","console","displayError","Container","Paper","Grid","item","justifyContent","Array","_","index","onChange","val","copy","textAlign","RadioGroup","event","target","FormControlLabel","control","Radio","label","href","description","location","setLocation","loc","Button","disabled","toggleCurves","drawCurves","LinearSyntenyView","initialized"],"mappings":"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","file":"32.aa3f117980c15500c977.worker.js","sourcesContent":["import React from 'react'\nimport { IconButton, Typography, makeStyles } from '@material-ui/core'\nimport { SearchBox } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\n// icons\nimport LinkIcon from '@material-ui/icons/Link'\nimport LinkOffIcon from '@material-ui/icons/LinkOff'\nimport CropFreeIcon from '@material-ui/icons/CropFree'\n\nimport { LinearComparativeViewModel } from '../model'\n\ntype LCV = LinearComparativeViewModel\n\nconst useStyles = makeStyles(() => ({\n  headerBar: {\n    gridArea: '1/1/auto/span 2',\n    display: 'flex',\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  bp: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 10,\n  },\n  searchContainer: {\n    marginLeft: 5,\n  },\n  searchBox: {\n    display: 'flex',\n  },\n}))\n\nconst LinkViews = observer(({ model }: { model: LCV }) => {\n  return (\n    <IconButton\n      onClick={model.toggleLinkViews}\n      title=\"Toggle linked scrolls and behavior across views\"\n    >\n      {model.linkViews ? (\n        <LinkOffIcon color=\"secondary\" />\n      ) : (\n        <LinkIcon color=\"secondary\" />\n      )}\n    </IconButton>\n  )\n})\n\nconst SquareView = observer(({ model }: { model: LCV }) => {\n  return (\n    <IconButton\n      onClick={model.squareView}\n      title=\"Square view (make both the same zoom level)\"\n    >\n      <CropFreeIcon color=\"secondary\" />\n    </IconButton>\n  )\n})\n\nconst Header = observer(\n  ({ model, ExtraButtons }: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const classes = useStyles()\n    const anyShowHeaders = model.views.some(view => !view.hideHeader)\n    return (\n      <div className={classes.headerBar}>\n        <LinkViews model={model} />\n        <SquareView model={model} />\n        {ExtraButtons}\n        {!anyShowHeaders\n          ? model.views.map(view => (\n              <div key={view.id} className={classes.searchBox}>\n                <div className={classes.searchContainer}>\n                  <SearchBox model={view} showHelp={false} />\n                </div>\n                <div className={classes.bp}>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    className={classes.bp}\n                  >\n                    {Math.round(view.coarseTotalBp).toLocaleString('en-US')} bp\n                  </Typography>\n                </div>\n              </div>\n            ))\n          : null}\n\n        <div className={classes.spacer} />\n      </div>\n    )\n  },\n)\n\nexport default Header\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration/configurationSchema'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { getEnv } from 'mobx-state-tree'\nimport { ResizeHandle } from '@jbrowse/core/ui'\nimport { LinearComparativeViewModel } from '../model'\nimport Header from './Header'\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    display: 'grid',\n  },\n  overlay: {\n    zIndex: 100,\n    gridArea: '1/1',\n  },\n  content: {\n    gridArea: '1/1',\n    position: 'relative',\n  },\n  grid: {\n    display: 'grid',\n  },\n  relative: {\n    position: 'relative',\n  },\n}))\n\ntype LCV = LinearComparativeViewModel\n\nconst Overlays = observer(({ model }: { model: LCV }) => {\n  const classes = useStyles()\n  return (\n    <>\n      {model.tracks.map(track => {\n        const [display] = track.displays\n        const { RenderingComponent } = display\n        const trackId = getConf(track, 'trackId')\n        return RenderingComponent ? (\n          <div\n            className={classes.overlay}\n            key={trackId}\n            style={{\n              height: model.middleComparativeHeight,\n              overflow: 'hidden',\n            }}\n          >\n            <RenderingComponent model={display} />\n          </div>\n        ) : null\n      })}\n    </>\n  )\n})\n\n// The comparative is in the middle of the views\nconst MiddleComparativeView = observer(\n  ({ model, ExtraButtons }: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const classes = useStyles()\n    const { views } = model\n    const { ReactComponent } = getEnv(model).pluginManager.getViewType(\n      views[0].type,\n    )\n\n    return (\n      <div>\n        <Header ExtraButtons={ExtraButtons} model={model} />\n        <div className={classes.container}>\n          <ReactComponent model={views[0]} />\n          <div className={classes.grid}>\n            <Overlays model={model} />\n          </div>\n          <ResizeHandle\n            onDrag={n =>\n              model.setMiddleComparativeHeight(\n                model.middleComparativeHeight + n,\n              )\n            }\n            style={{\n              height: 4,\n              background: '#ccc',\n            }}\n          />\n          <ReactComponent model={views[1]} />\n        </div>\n      </div>\n    )\n  },\n)\nconst OverlayComparativeView = observer(\n  ({ model, ExtraButtons }: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const classes = useStyles()\n    const { views } = model\n    const { pluginManager } = getEnv(model)\n    return (\n      <div>\n        <Header model={model} ExtraButtons={ExtraButtons} />\n        <div className={classes.container}>\n          <div className={classes.content}>\n            <div className={classes.relative}>\n              {views.map(view => {\n                const { ReactComponent } = pluginManager.getViewType(view.type)\n                return <ReactComponent key={view.id} model={view} />\n              })}\n            </div>\n            <Overlays model={model} />\n          </div>\n        </div>\n      </div>\n    )\n  },\n)\n\nconst LinearComparativeView = observer(\n  (props: { ExtraButtons?: React.ReactNode; model: LCV }) => {\n    const { model } = props\n    const middle = model.tracks.some(({ displays }) =>\n      displays.some((d: AnyConfigurationModel) => getConf(d, 'middle')),\n    )\n    return middle ? (\n      <MiddleComparativeView {...props} />\n    ) : (\n      <OverlayComparativeView {...props} />\n    )\n  },\n)\n\nexport default LinearComparativeView\n","import React, { useState } from 'react'\nimport path from 'path'\nimport { transaction } from 'mobx'\nimport { observer } from 'mobx-react'\nimport { getSession, isSessionWithAddTracks } from '@jbrowse/core/util'\nimport {\n  Button,\n  Container,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Grid,\n  Paper,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { FileLocation } from '@jbrowse/core/util/types'\nimport { FileSelector, ErrorMessage, AssemblySelector } from '@jbrowse/core/ui'\nimport { LinearSyntenyViewModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(4),\n  },\n\n  formPaper: {\n    margin: '0 auto',\n    padding: 12,\n    marginBottom: 10,\n  },\n}))\n\nfunction getName(\n  trackData?: { uri: string } | { localPath: string } | { name: string },\n) {\n  return trackData\n    ? // @ts-ignore\n      trackData.uri || trackData.localPath || trackData.name\n    : undefined\n}\n\nfunction stripGz(fileName: string) {\n  return fileName.endsWith('.gz')\n    ? fileName.slice(0, fileName.length - 3)\n    : fileName\n}\n\nconst ImportForm = observer(({ model }: { model: LinearSyntenyViewModel }) => {\n  const classes = useStyles()\n  const session = getSession(model)\n\n  const { assemblyNames, assemblyManager } = session\n  const [selected, setSelected] = useState([assemblyNames[0], assemblyNames[0]])\n  const [trackData, setTrackData] = useState<FileLocation>()\n  const [bed2Location, setBed2Location] = useState<FileLocation>()\n  const [bed1Location, setBed1Location] = useState<FileLocation>()\n  const [numRows] = useState(2)\n  const [error, setError] = useState<unknown>()\n\n  const [value, setValue] = useState('')\n  const fileName = getName(trackData)\n  const radioOption = value || (fileName ? path.extname(stripGz(fileName)) : '')\n\n  const assemblyError = assemblyNames.length\n    ? selected\n        .map(a => assemblyManager.get(a)?.error)\n        .filter(f => !!f)\n        .join(', ')\n    : 'No configured assemblies'\n\n  function getAdapter() {\n    if (radioOption === '.paf') {\n      return {\n        type: 'PAFAdapter',\n        pafLocation: trackData,\n        assemblyNames: selected,\n      }\n    } else if (radioOption === '.out') {\n      return {\n        type: 'MashMapAdapter',\n        outLocation: trackData,\n        assemblyNames: selected,\n      }\n    } else if (radioOption === '.delta') {\n      return {\n        type: 'DeltaAdapter',\n        deltaLocation: trackData,\n        assemblyNames: selected,\n      }\n    } else if (radioOption === '.chain') {\n      return {\n        type: 'ChainAdapter',\n        chainLocation: trackData,\n        assemblyNames: selected,\n      }\n    } else if (radioOption === '.anchors') {\n      return {\n        type: 'MCScanAnchorsAdapter',\n        mcscanAnchorsLocation: trackData,\n        bed1Location,\n        bed2Location,\n        assemblyNames: selected,\n      }\n    } else if (radioOption === '.anchors.simple') {\n      return {\n        type: 'MCScanSimpleAnchorsAdapter',\n        mcscanSimpleAnchorsLocation: trackData,\n        bed1Location,\n        bed2Location,\n        assemblyNames: selected,\n      }\n    } else {\n      throw new Error('Unknown type')\n    }\n  }\n\n  async function onOpenClick() {\n    try {\n      if (!isSessionWithAddTracks(session)) {\n        return\n      }\n      model.setViews(\n        await Promise.all(\n          selected.map(async selection => {\n            const assembly = await assemblyManager.waitForAssembly(selection)\n            if (!assembly) {\n              throw new Error(`Assembly ${selection} failed to load`)\n            }\n            return {\n              type: 'LinearGenomeView' as 'LinearGenomeView',\n              bpPerPx: 1,\n              offsetPx: 0,\n              hideHeader: true,\n              displayedRegions: assembly.regions,\n            }\n          }),\n        ),\n      )\n\n      model.views.forEach(view => view.setWidth(model.width))\n\n      transaction(() => {\n        if (trackData) {\n          const fileName = path.basename(getName(trackData)) || 'MyTrack'\n          const trackId = `${fileName}-${Date.now()}`\n\n          session.addTrackConf({\n            trackId: trackId,\n            name: fileName,\n            assemblyNames: selected,\n            type: 'SyntenyTrack',\n            adapter: getAdapter(),\n          })\n\n          model.toggleTrack(trackId)\n        }\n      })\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }\n\n  // this is a combination of any displayed error message we have\n  const displayError = error || assemblyError\n  return (\n    <Container className={classes.importFormContainer}>\n      {displayError ? <ErrorMessage error={displayError} /> : null}\n      <Paper className={classes.formPaper}>\n        <Grid\n          container\n          item\n          justifyContent=\"center\"\n          spacing={4}\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Typography>Select assemblies for synteny view</Typography>\n            {[...new Array(numRows)].map((_, index) => (\n              <AssemblySelector\n                key={`row_${index}_${selected[index]}`}\n                selected={selected[index]}\n                onChange={val => {\n                  // splice the value into the current array\n                  const copy = selected.slice(0)\n                  copy[index] = val\n                  setSelected(copy)\n                }}\n                session={session}\n              />\n            ))}\n          </Grid>\n        </Grid>\n      </Paper>\n\n      <Paper className={classes.formPaper}>\n        <Typography style={{ textAlign: 'center' }}>\n          <b>Optional</b>: Add a .paf, .out (MashMap), .delta (Mummer), .chain,\n          .anchors or .anchors.simple (MCScan) file to view in the synteny view.\n          These file types can also be gzipped. The first assembly should be the\n          query sequence (e.g. left column of the PAF) and the second assembly\n          should be the target sequence (e.g. right column of the PAF)\n        </Typography>\n        <RadioGroup\n          value={radioOption}\n          onChange={event => setValue(event.target.value)}\n        >\n          <Grid container justifyContent=\"center\">\n            <Grid item>\n              <FormControlLabel value=\".paf\" control={<Radio />} label=\".paf\" />\n            </Grid>\n            <Grid item>\n              <FormControlLabel value=\".out\" control={<Radio />} label=\".out\" />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".delta\"\n                control={<Radio />}\n                label=\".delta\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".chain\"\n                control={<Radio />}\n                label=\".chain\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".anchors\"\n                control={<Radio />}\n                label=\".anchors\"\n              />\n            </Grid>\n            <Grid item>\n              <FormControlLabel\n                value=\".anchors.simple\"\n                control={<Radio />}\n                label=\".anchors.simple\"\n              />\n            </Grid>\n          </Grid>\n        </RadioGroup>\n        <Grid container justifyContent=\"center\">\n          <Grid item>\n            {value === '.anchors' || value === '.anchors.simple' ? (\n              <div>\n                <div style={{ margin: 20 }}>\n                  Open the {value}, and .bed files for both genome assemblies\n                  from the MCScan (Python verson) pipeline{' '}\n                  <a href=\"https://github.com/tanghaibao/jcvi/wiki/MCscan-(Python-version)\">\n                    (more info)\n                  </a>\n                </div>\n                <div style={{ display: 'flex' }}>\n                  <div>\n                    <FileSelector\n                      name=\".anchors file\"\n                      description=\"\"\n                      location={trackData}\n                      setLocation={loc => setTrackData(loc)}\n                    />\n                  </div>\n                  <div>\n                    <FileSelector\n                      name=\"genome 1 .bed (left column of anchors file)\"\n                      description=\"\"\n                      location={bed1Location}\n                      setLocation={loc => setBed1Location(loc)}\n                    />\n                  </div>\n                  <div>\n                    <FileSelector\n                      name=\"genome 2 .bed (right column of anchors file)\"\n                      description=\"\"\n                      location={bed2Location}\n                      setLocation={loc => setBed2Location(loc)}\n                    />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <FileSelector\n                name={value ? value + ' location' : ''}\n                description=\"\"\n                location={trackData}\n                setLocation={loc => setTrackData(loc)}\n              />\n            )}\n          </Grid>\n        </Grid>\n      </Paper>\n      <Grid container justifyContent=\"center\">\n        <Grid item>\n          <Button\n            // only disable button on assemblyError. for other types of errors\n            // in the useState can retry\n            disabled={!!assemblyError}\n            onClick={onOpenClick}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Open\n          </Button>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n})\n\nexport default ImportForm\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { IconButton } from '@material-ui/core'\nimport LinearComparativeViewComponent from '../../LinearComparativeView/components/LinearComparativeView'\nimport { LinearSyntenyViewModel } from '../model'\nimport { Curves, StraightLines } from './Icons'\nimport ImportForm from './ImportForm'\n\nconst ExtraButtons = observer(\n  ({ model }: { model: LinearSyntenyViewModel }) => {\n    return (\n      <IconButton\n        onClick={() => {\n          model.toggleCurves()\n        }}\n        title=\"Toggle drawing straight or curved synteny lines\"\n      >\n        {model.drawCurves ? (\n          <StraightLines color=\"secondary\" />\n        ) : (\n          <Curves color=\"secondary\" />\n        )}\n      </IconButton>\n    )\n  },\n)\n\nconst LinearSyntenyView = observer(\n  ({ model }: { model: LinearSyntenyViewModel }) => {\n    const { initialized } = model\n    if (!initialized) {\n      return <ImportForm model={model} />\n    }\n    return (\n      <LinearComparativeViewComponent\n        model={model}\n        ExtraButtons={<ExtraButtons model={model} />}\n      />\n    )\n  },\n)\n\nexport default LinearSyntenyView\n"],"sourceRoot":""}